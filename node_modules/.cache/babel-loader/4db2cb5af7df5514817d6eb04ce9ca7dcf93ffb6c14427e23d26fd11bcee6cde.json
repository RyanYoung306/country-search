{"ast":null,"code":"/*\n * Copyright (c) 2013 Trent Mick. All rights reserved.\n * Copyright (c) 2013 Joyent Inc. All rights reserved.\n *\n * The bunyan logging library for node.js.\n *\n * vim: expandtab:ts=4:sw=4\n */\n\nvar VERSION = '0.22.3';\n\n// Bunyan log format version. This becomes the 'v' field on all log records.\n// `0` is until I release a version '1.0.0' of node-bunyan. Thereafter,\n// starting with `1`, this will be incremented if there is any backward\n// incompatible change to the log record format. Details will be in\n// 'CHANGES.md' (the change log).\nvar LOG_VERSION = 0;\nvar xxx = function xxx(s) {\n  // internal dev/debug logging\n  var args = ['XX' + 'X: ' + s].concat(Array.prototype.slice.call(arguments, 1));\n  console.error.apply(this, args);\n};\nvar xxx = function xxx() {}; // comment out to turn on debug logging\n\nvar os = require('os');\nvar fs = require('fs');\nvar util = require('util');\nvar assert = require('assert');\ntry {\n  var dtrace = require('dtrace-provider');\n} catch (e) {\n  dtrace = null;\n}\nvar EventEmitter = require('events').EventEmitter;\n\n// The 'mv' module is required for rotating-file stream support.\ntry {\n  var mv = require('mv');\n} catch (e) {\n  mv = null;\n}\n\n//---- Internal support stuff\n\nfunction objCopy(obj) {\n  if (obj === null) {\n    return null;\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    var copy = {};\n    Object.keys(obj).forEach(function (k) {\n      copy[k] = obj[k];\n    });\n    return copy;\n  }\n}\nvar format = util.format;\nif (!format) {\n  // If node < 0.6, then use its `util.format`:\n  // <https://github.com/joyent/node/blob/master/lib/util.js#L22>:\n  var inspect = util.inspect;\n  var formatRegExp = /%[sdj%]/g;\n  format = function format(f) {\n    if (typeof f !== 'string') {\n      var objects = [];\n      for (var i = 0; i < arguments.length; i++) {\n        objects.push(inspect(arguments[i]));\n      }\n      return objects.join(' ');\n    }\n    var i = 1;\n    var args = arguments;\n    var len = args.length;\n    var str = String(f).replace(formatRegExp, function (x) {\n      if (i >= len) return x;\n      switch (x) {\n        case '%s':\n          return String(args[i++]);\n        case '%d':\n          return Number(args[i++]);\n        case '%j':\n          return JSON.stringify(args[i++], safeCycles());\n        case '%%':\n          return '%';\n        default:\n          return x;\n      }\n    });\n    for (var x = args[i]; i < len; x = args[++i]) {\n      if (x === null || typeof x !== 'object') {\n        str += ' ' + x;\n      } else {\n        str += ' ' + inspect(x);\n      }\n    }\n    return str;\n  };\n}\n\n/**\n * Gather some caller info 3 stack levels up.\n * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.\n */\nfunction getCaller3Info() {\n  var obj = {};\n  var saveLimit = Error.stackTraceLimit;\n  var savePrepare = Error.prepareStackTrace;\n  Error.stackTraceLimit = 3;\n  Error.captureStackTrace(this, getCaller3Info);\n  Error.prepareStackTrace = function (_, stack) {\n    var caller = stack[2];\n    obj.file = caller.getFileName();\n    obj.line = caller.getLineNumber();\n    var func = caller.getFunctionName();\n    if (func) obj.func = func;\n  };\n  this.stack;\n  Error.stackTraceLimit = saveLimit;\n  Error.prepareStackTrace = savePrepare;\n  return obj;\n}\n\n/**\n * Warn about an bunyan processing error.\n *\n * If file/line are given, this makes an attempt to warn on stderr only once.\n *\n * @param msg {String} Message with which to warn.\n * @param file {String} Optional. File path relevant for the warning.\n * @param line {String} Optional. Line number in `file` path relevant for\n *    the warning.\n */\nfunction _warn(msg, file, line) {\n  assert.ok(msg);\n  var key;\n  if (file && line) {\n    key = file + ':' + line;\n    if (_warned[key]) {\n      return;\n    }\n    _warned[key] = true;\n  }\n  process.stderr.write(msg + '\\n');\n}\nvar _warned = {};\n\n//---- Levels\n\nvar TRACE = 10;\nvar DEBUG = 20;\nvar INFO = 30;\nvar WARN = 40;\nvar ERROR = 50;\nvar FATAL = 60;\nvar levelFromName = {\n  'trace': TRACE,\n  'debug': DEBUG,\n  'info': INFO,\n  'warn': WARN,\n  'error': ERROR,\n  'fatal': FATAL\n};\n\n// Dtrace probes.\nvar dtp = undefined;\nvar probes = dtrace && {};\n\n/**\n * Resolve a level number, name (upper or lowercase) to a level number value.\n *\n * @api public\n */\nfunction resolveLevel(nameOrNum) {\n  var level = typeof nameOrNum === 'string' ? levelFromName[nameOrNum.toLowerCase()] : nameOrNum;\n  if (!(TRACE <= level && level <= FATAL)) {\n    throw new Error('invalid level: ' + nameOrNum);\n  }\n  return level;\n}\n\n//---- Logger class\n\n/**\n * Create a Logger instance.\n *\n * @param options {Object} See documentation for full details. At minimum\n *    this must include a 'name' string key. Configuration keys:\n *      - `streams`: specify the logger output streams. This is an array of\n *        objects with these fields:\n *          - `type`: The stream type. See README.md for full details.\n *            Often this is implied by the other fields. Examples are\n *            'file', 'stream' and \"raw\".\n *          - `level`: Defaults to 'info'.\n *          - `path` or `stream`: The specify the file path or writeable\n *            stream to which log records are written. E.g.\n *            `stream: process.stdout`.\n *          - `closeOnExit` (boolean): Optional. Default is true for a\n *            'file' stream when `path` is given, false otherwise.\n *        See README.md for full details.\n *      - `level`: set the level for a single output stream (cannot be used\n *        with `streams`)\n *      - `stream`: the output stream for a logger with just one, e.g.\n *        `process.stdout` (cannot be used with `streams`)\n *      - `serializers`: object mapping log record field names to\n *        serializing functions. See README.md for details.\n *      - `src`: Boolean (default false). Set true to enable 'src' automatic\n *        field with log call source info.\n *    All other keys are log record fields.\n *\n * An alternative *internal* call signature is used for creating a child:\n *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);\n *\n * @param _childSimple (Boolean) An assertion that the given `_childOptions`\n *    (a) only add fields (no config) and (b) no serialization handling is\n *    required for them. IOW, this is a fast path for frequent child\n *    creation.\n */\nfunction Logger(options, _childOptions, _childSimple) {\n  xxx('Logger start:', options);\n  if (!this instanceof Logger) {\n    return new Logger(options, _childOptions);\n  }\n\n  // Input arg validation.\n  var parent;\n  if (_childOptions !== undefined) {\n    parent = options;\n    options = _childOptions;\n    if (!parent instanceof Logger) {\n      throw new TypeError('invalid Logger creation: do not pass a second arg');\n    }\n  }\n  if (!options) {\n    throw new TypeError('options (object) is required');\n  }\n  if (!parent) {\n    if (!options.name) {\n      throw new TypeError('options.name (string) is required');\n    }\n  } else {\n    if (options.name) {\n      throw new TypeError('invalid options.name: child cannot set logger name');\n    }\n  }\n  if (options.stream && options.streams) {\n    throw new TypeError('cannot mix \"streams\" and \"stream\" options');\n  }\n  if (options.streams && !Array.isArray(options.streams)) {\n    throw new TypeError('invalid options.streams: must be an array');\n  }\n  if (options.serializers && (typeof options.serializers !== 'object' || Array.isArray(options.serializers))) {\n    throw new TypeError('invalid options.serializers: must be an object');\n  }\n  EventEmitter.call(this);\n\n  // Fast path for simple child creation.\n  if (parent && _childSimple) {\n    // `_isSimpleChild` is a signal to stream close handling that this child\n    // owns none of its streams.\n    this._isSimpleChild = true;\n    this._level = parent._level;\n    this.streams = parent.streams;\n    this.serializers = parent.serializers;\n    this.src = parent.src;\n    var fields = this.fields = {};\n    var parentFieldNames = Object.keys(parent.fields);\n    for (var i = 0; i < parentFieldNames.length; i++) {\n      var name = parentFieldNames[i];\n      fields[name] = parent.fields[name];\n    }\n    var names = Object.keys(options);\n    for (var i = 0; i < names.length; i++) {\n      var name = names[i];\n      fields[name] = options[name];\n    }\n    return;\n  }\n\n  // Null values.\n  var self = this;\n  if (parent) {\n    this._level = parent._level;\n    this.streams = [];\n    for (var i = 0; i < parent.streams.length; i++) {\n      var s = objCopy(parent.streams[i]);\n      s.closeOnExit = false; // Don't own parent stream.\n      this.streams.push(s);\n    }\n    this.serializers = objCopy(parent.serializers);\n    this.src = parent.src;\n    this.fields = objCopy(parent.fields);\n    if (options.level) {\n      this.level(options.level);\n    }\n  } else {\n    this._level = Number.POSITIVE_INFINITY;\n    this.streams = [];\n    this.serializers = null;\n    this.src = false;\n    this.fields = {};\n  }\n  if (!dtp && dtrace) {\n    dtp = dtrace.createDTraceProvider('bunyan');\n    for (var level in levelFromName) {\n      var probe;\n      probes[levelFromName[level]] = probe = dtp.addProbe('log-' + level, 'char *');\n\n      // Explicitly add a reference to dtp to prevent it from being GC'd\n      probe.dtp = dtp;\n    }\n    dtp.enable();\n  }\n\n  // Helpers\n  function addStream(s) {\n    s = objCopy(s);\n\n    // Implicit 'type' from other args.\n    var type = s.type;\n    if (!s.type) {\n      if (s.stream) {\n        s.type = 'stream';\n      } else if (s.path) {\n        s.type = 'file';\n      }\n    }\n    s.raw = s.type === 'raw'; // PERF: Allow for faster check in `_emit`.\n\n    if (s.level) {\n      s.level = resolveLevel(s.level);\n    } else if (options.level) {\n      s.level = resolveLevel(options.level);\n    } else {\n      s.level = INFO;\n    }\n    if (s.level < self._level) {\n      self._level = s.level;\n    }\n    switch (s.type) {\n      case 'stream':\n        if (!s.closeOnExit) {\n          s.closeOnExit = false;\n        }\n        break;\n      case 'file':\n        if (!s.stream) {\n          s.stream = fs.createWriteStream(s.path, {\n            flags: 'a',\n            encoding: 'utf8'\n          });\n          s.stream.on('error', function (err) {\n            self.emit('error', err, s);\n          });\n          if (!s.closeOnExit) {\n            s.closeOnExit = true;\n          }\n        } else {\n          if (!s.closeOnExit) {\n            s.closeOnExit = false;\n          }\n        }\n        break;\n      case 'rotating-file':\n        assert.ok(!s.stream, '\"rotating-file\" stream should not give a \"stream\"');\n        assert.ok(s.path);\n        assert.ok(mv, '\"rotating-file\" stream type is not supported: ' + 'missing \"mv\" module');\n        s.stream = new RotatingFileStream(s);\n        if (!s.closeOnExit) {\n          s.closeOnExit = true;\n        }\n        break;\n      case 'raw':\n        if (!s.closeOnExit) {\n          s.closeOnExit = false;\n        }\n        break;\n      default:\n        throw new TypeError('unknown stream type \"' + s.type + '\"');\n    }\n    self.streams.push(s);\n  }\n  function addSerializers(serializers) {\n    if (!self.serializers) {\n      self.serializers = {};\n    }\n    Object.keys(serializers).forEach(function (field) {\n      var serializer = serializers[field];\n      if (typeof serializer !== 'function') {\n        throw new TypeError(format('invalid serializer for \"%s\" field: must be a function', field));\n      } else {\n        self.serializers[field] = serializer;\n      }\n    });\n  }\n\n  // Handle *config* options (i.e. options that are not just plain data\n  // for log records).\n  if (options.stream) {\n    addStream({\n      type: 'stream',\n      stream: options.stream,\n      closeOnExit: false,\n      level: options.level ? resolveLevel(options.level) : INFO\n    });\n  } else if (options.streams) {\n    options.streams.forEach(addStream);\n  } else if (parent && options.level) {\n    this.level(options.level);\n  } else if (!parent) {\n    addStream({\n      type: 'stream',\n      stream: process.stdout,\n      closeOnExit: false,\n      level: options.level ? resolveLevel(options.level) : INFO\n    });\n  }\n  if (options.serializers) {\n    addSerializers(options.serializers);\n  }\n  if (options.src) {\n    this.src = true;\n  }\n  xxx('Logger: ', self);\n\n  // Fields.\n  // These are the default fields for log records (minus the attributes\n  // removed in this constructor). To allow storing raw log records\n  // (unrendered), `this.fields` must never be mutated. Create a copy for\n  // any changes.\n  var fields = objCopy(options);\n  delete fields.stream;\n  delete fields.level;\n  delete fields.streams;\n  delete fields.serializers;\n  delete fields.src;\n  if (this.serializers) {\n    this._applySerializers(fields);\n  }\n  if (!fields.hostname) {\n    fields.hostname = os.hostname();\n  }\n  if (!fields.pid) {\n    fields.pid = process.pid;\n  }\n  Object.keys(fields).forEach(function (k) {\n    self.fields[k] = fields[k];\n  });\n}\nutil.inherits(Logger, EventEmitter);\n\n/**\n * Create a child logger, typically to add a few log record fields.\n *\n * This can be useful when passing a logger to a sub-component, e.g. a\n * 'wuzzle' component of your service:\n *\n *    var wuzzleLog = log.child({component: 'wuzzle'})\n *    var wuzzle = new Wuzzle({..., log: wuzzleLog})\n *\n * Then log records from the wuzzle code will have the same structure as\n * the app log, *plus the component='wuzzle' field*.\n *\n * @param options {Object} Optional. Set of options to apply to the child.\n *    All of the same options for a new Logger apply here. Notes:\n *      - The parent's streams are inherited and cannot be removed in this\n *        call. Any given `streams` are *added* to the set inherited from\n *        the parent.\n *      - The parent's serializers are inherited, though can effectively be\n *        overwritten by using duplicate keys.\n *      - Can use `level` to set the level of the streams inherited from\n *        the parent. The level for the parent is NOT affected.\n * @param simple {Boolean} Optional. Set to true to assert that `options`\n *    (a) only add fields (no config) and (b) no serialization handling is\n *    required for them. IOW, this is a fast path for frequent child\n *    creation. See 'tools/timechild.js' for numbers.\n */\nLogger.prototype.child = function (options, simple) {\n  return new Logger(this, options || {}, simple);\n};\n\n/**\n * A convenience method to reopen 'file' streams on a logger. This can be\n * useful with external log rotation utilities that move and re-open log files\n * (e.g. logrotate on Linux, logadm on SmartOS/Illumos). Those utilities\n * typically have rotation options to copy-and-truncate the log file, but\n * you may not want to use that. An alternative is to do this in your\n * application:\n *\n *      var log = bunyan.createLogger(...);\n *      ...\n *      process.on('SIGUSR2', function () {\n *          log.reopenFileStreams();\n *      });\n *      ...\n *\n * See <https://github.com/trentm/node-bunyan/issues/104>.\n */\nLogger.prototype.reopenFileStreams = function () {\n  var self = this;\n  self.streams.forEach(function (s) {\n    if (s.type === 'file') {\n      if (s.stream) {\n        // Not sure if typically would want this, or more immediate\n        // `s.stream.destroy()`.\n        s.stream.end();\n        s.stream.destroySoon();\n        delete s.stream;\n      }\n      s.stream = fs.createWriteStream(s.path, {\n        flags: 'a',\n        encoding: 'utf8'\n      });\n      s.stream.on('error', function (err) {\n        self.emit('error', err, s);\n      });\n    }\n  });\n};\n\n/* BEGIN JSSTYLED */\n/**\n * Close this logger.\n *\n * This closes streams (that it owns, as per 'endOnClose' attributes on\n * streams), etc. Typically you **don't** need to bother calling this.\nLogger.prototype.close = function () {\n    if (this._closed) {\n        return;\n    }\n    if (!this._isSimpleChild) {\n        self.streams.forEach(function (s) {\n            if (s.endOnClose) {\n                xxx('closing stream s:', s);\n                s.stream.end();\n                s.endOnClose = false;\n            }\n        });\n    }\n    this._closed = true;\n}\n */\n/* END JSSTYLED */\n\n/**\n * Get/set the level of all streams on this logger.\n *\n * Get Usage:\n *    // Returns the current log level (lowest level of all its streams).\n *    log.level() -> INFO\n *\n * Set Usage:\n *    log.level(INFO)       // set all streams to level INFO\n *    log.level('info')     // can use 'info' et al aliases\n */\nLogger.prototype.level = function level(value) {\n  if (value === undefined) {\n    return this._level;\n  }\n  var newLevel = resolveLevel(value);\n  var len = this.streams.length;\n  for (var i = 0; i < len; i++) {\n    this.streams[i].level = newLevel;\n  }\n  this._level = newLevel;\n};\n\n/**\n * Get/set the level of a particular stream on this logger.\n *\n * Get Usage:\n *    // Returns an array of the levels of each stream.\n *    log.levels() -> [TRACE, INFO]\n *\n *    // Returns a level of the identified stream.\n *    log.levels(0) -> TRACE      // level of stream at index 0\n *    log.levels('foo')           // level of stream with name 'foo'\n *\n * Set Usage:\n *    log.levels(0, INFO)         // set level of stream 0 to INFO\n *    log.levels(0, 'info')       // can use 'info' et al aliases\n *    log.levels('foo', WARN)     // set stream named 'foo' to WARN\n *\n * Stream names: When streams are defined, they can optionally be given\n * a name. For example,\n *       log = new Logger({\n *         streams: [\n *           {\n *             name: 'foo',\n *             path: '/var/log/my-service/foo.log'\n *             level: 'trace'\n *           },\n *         ...\n *\n * @param name {String|Number} The stream index or name.\n * @param value {Number|String} The level value (INFO) or alias ('info').\n *    If not given, this is a 'get' operation.\n * @throws {Error} If there is no stream with the given name.\n */\nLogger.prototype.levels = function levels(name, value) {\n  if (name === undefined) {\n    assert.equal(value, undefined);\n    return this.streams.map(function (s) {\n      return s.level;\n    });\n  }\n  var stream;\n  if (typeof name === 'number') {\n    stream = this.streams[name];\n    if (stream === undefined) {\n      throw new Error('invalid stream index: ' + name);\n    }\n  } else {\n    var len = this.streams.length;\n    for (var i = 0; i < len; i++) {\n      var s = this.streams[i];\n      if (s.name === name) {\n        stream = s;\n        break;\n      }\n    }\n    if (!stream) {\n      throw new Error(format('no stream with name \"%s\"', name));\n    }\n  }\n  if (value === undefined) {\n    return stream.level;\n  } else {\n    var newLevel = resolveLevel(value);\n    stream.level = newLevel;\n    if (newLevel < this._level) {\n      this._level = newLevel;\n    }\n  }\n};\n\n/**\n * Apply registered serializers to the appropriate keys in the given fields.\n *\n * Pre-condition: This is only called if there is at least one serializer.\n *\n * @param fields (Object) The log record fields.\n * @param excludeFields (Object) Optional mapping of keys to `true` for\n *    keys to NOT apply a serializer.\n */\nLogger.prototype._applySerializers = function (fields, excludeFields) {\n  var self = this;\n  xxx('_applySerializers: excludeFields', excludeFields);\n\n  // Check each serializer against these (presuming number of serializers\n  // is typically less than number of fields).\n  Object.keys(this.serializers).forEach(function (name) {\n    if (fields[name] === undefined || excludeFields && excludeFields[name]) {\n      return;\n    }\n    xxx('_applySerializers; apply to \"%s\" key', name);\n    try {\n      fields[name] = self.serializers[name](fields[name]);\n    } catch (err) {\n      _warn(format('bunyan: ERROR: This should never happen. ' + 'This is a bug in <https://github.com/trentm/node-bunyan> ' + 'or in this application. Exception from \"%s\" Logger ' + 'serializer: %s', name, err.stack || err));\n      fields[name] = format('(Error in Bunyan log \"%s\" serializer ' + 'broke field. See stderr for details.)', name);\n    }\n  });\n};\n\n/**\n * Emit a log record.\n *\n * @param rec {log record}\n * @param noemit {Boolean} Optional. Set to true to skip emission\n *      and just return the JSON string.\n */\nLogger.prototype._emit = function (rec, noemit) {\n  var i;\n\n  // Lazily determine if this Logger has non-'raw' streams. If there are\n  // any, then we need to stringify the log record.\n  if (this.haveNonRawStreams === undefined) {\n    this.haveNonRawStreams = false;\n    for (i = 0; i < this.streams.length; i++) {\n      if (!this.streams[i].raw) {\n        this.haveNonRawStreams = true;\n        break;\n      }\n    }\n  }\n\n  // Stringify the object. Attempt to warn/recover on error.\n  var str;\n  if (noemit || this.haveNonRawStreams) {\n    str = JSON.stringify(rec, safeCycles()) + '\\n';\n  }\n  if (noemit) return str;\n  var level = rec.level;\n  for (i = 0; i < this.streams.length; i++) {\n    var s = this.streams[i];\n    if (s.level <= level) {\n      xxx('writing log rec \"%s\" to \"%s\" stream (%d <= %d): %j', rec.msg, s.type, s.level, level, rec);\n      s.stream.write(s.raw ? rec : str);\n    }\n  }\n  ;\n  return str;\n};\n\n/**\n * Build a log emitter function for level minLevel. I.e. this is the\n * creator of `log.info`, `log.error`, etc.\n */\nfunction mkLogEmitter(minLevel) {\n  return function () {\n    var log = this;\n    function mkRecord(args) {\n      var excludeFields;\n      if (args[0] instanceof Error) {\n        // `log.<level>(err, ...)`\n        fields = {\n          err: errSerializer(args[0])\n        };\n        excludeFields = {\n          err: true\n        };\n        if (args.length === 1) {\n          msgArgs = [fields.err.message];\n        } else {\n          msgArgs = Array.prototype.slice.call(args, 1);\n        }\n      } else if (typeof args[0] === 'string' || typeof args[0] === 'number') {\n        // `log.<level>(msg, ...)`\n        fields = null;\n        msgArgs = Array.prototype.slice.call(args);\n      } else if (Buffer.isBuffer(args[0])) {\n        // `log.<level>(buf, ...)`\n        // Almost certainly an error, show `inspect(buf)`. See bunyan\n        // issue #35.\n        fields = null;\n        msgArgs = Array.prototype.slice.call(args);\n        msgArgs[0] = util.inspect(msgArgs[0]);\n      } else {\n        // `log.<level>(fields, msg, ...)`\n        fields = args[0];\n        msgArgs = Array.prototype.slice.call(args, 1);\n      }\n\n      // Build up the record object.\n      var rec = objCopy(log.fields);\n      var level = rec.level = minLevel;\n      var recFields = fields ? objCopy(fields) : null;\n      if (recFields) {\n        if (log.serializers) {\n          log._applySerializers(recFields, excludeFields);\n        }\n        Object.keys(recFields).forEach(function (k) {\n          rec[k] = recFields[k];\n        });\n      }\n      rec.msg = format.apply(log, msgArgs);\n      if (!rec.time) {\n        rec.time = new Date();\n      }\n      // Get call source info\n      if (log.src && !rec.src) {\n        rec.src = getCaller3Info();\n      }\n      rec.v = LOG_VERSION;\n      return rec;\n    }\n    ;\n    var fields = null;\n    var msgArgs = arguments;\n    var str = null;\n    var rec = null;\n    if (arguments.length === 0) {\n      // `log.<level>()`\n      return this._level <= minLevel;\n    } else if (this._level > minLevel) {\n      /* pass through */\n    } else {\n      rec = mkRecord(msgArgs);\n      str = this._emit(rec);\n    }\n    probes && probes[minLevel].fire(function () {\n      return [str || rec && log._emit(rec, true) || log._emit(mkRecord(msgArgs), true)];\n    });\n  };\n}\n\n/**\n * The functions below log a record at a specific level.\n *\n * Usages:\n *    log.<level>()  -> boolean is-trace-enabled\n *    log.<level>(<Error> err, [<string> msg, ...])\n *    log.<level>(<string> msg, ...)\n *    log.<level>(<object> fields, <string> msg, ...)\n *\n * where <level> is the lowercase version of the log level. E.g.:\n *\n *    log.info()\n *\n * @params fields {Object} Optional set of additional fields to log.\n * @params msg {String} Log message. This can be followed by additional\n *    arguments that are handled like\n *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).\n */\nLogger.prototype.trace = mkLogEmitter(TRACE);\nLogger.prototype.debug = mkLogEmitter(DEBUG);\nLogger.prototype.info = mkLogEmitter(INFO);\nLogger.prototype.warn = mkLogEmitter(WARN);\nLogger.prototype.error = mkLogEmitter(ERROR);\nLogger.prototype.fatal = mkLogEmitter(FATAL);\n\n//---- Standard serializers\n// A serializer is a function that serializes a JavaScript object to a\n// JSON representation for logging. There is a standard set of presumed\n// interesting objects in node.js-land.\n\nLogger.stdSerializers = {};\n\n// Serialize an HTTP request.\nLogger.stdSerializers.req = function req(req) {\n  if (!req || !req.connection) return req;\n  return {\n    method: req.method,\n    url: req.url,\n    headers: req.headers,\n    remoteAddress: req.connection.remoteAddress,\n    remotePort: req.connection.remotePort\n  };\n  // Trailers: Skipping for speed. If you need trailers in your app, then\n  // make a custom serializer.\n  //if (Object.keys(trailers).length > 0) {\n  //  obj.trailers = req.trailers;\n  //}\n};\n\n// Serialize an HTTP response.\nLogger.stdSerializers.res = function res(res) {\n  if (!res || !res.statusCode) return res;\n  return {\n    statusCode: res.statusCode,\n    header: res._header\n  };\n};\n\n/*\n * This function dumps long stack traces for exceptions having a cause()\n * method. The error classes from\n * [verror](https://github.com/davepacheco/node-verror) and\n * [restify v2.0](https://github.com/mcavage/node-restify) are examples.\n *\n * Based on `dumpException` in\n * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js\n */\nfunction getFullErrorStack(ex) {\n  var ret = ex.stack || ex.toString();\n  if (ex.cause && typeof ex.cause === 'function') {\n    var cex = ex.cause();\n    if (cex) {\n      ret += '\\nCaused by: ' + getFullErrorStack(cex);\n    }\n  }\n  return ret;\n}\n\n// Serialize an Error object\n// (Core error properties are enumerable in node 0.4, not in 0.6).\nvar errSerializer = Logger.stdSerializers.err = function err(err) {\n  if (!err || !err.stack) return err;\n  var obj = {\n    message: err.message,\n    name: err.name,\n    stack: getFullErrorStack(err),\n    code: err.code,\n    signal: err.signal\n  };\n  return obj;\n};\n\n// A JSON stringifier that handles cycles safely.\n// Usage: JSON.stringify(obj, safeCycles())\nfunction safeCycles() {\n  var seen = [];\n  return function (key, val) {\n    if (!val || typeof val !== 'object') {\n      return val;\n    }\n    if (seen.indexOf(val) !== -1) {\n      return '[Circular]';\n    }\n    seen.push(val);\n    return val;\n  };\n}\n\n/**\n * XXX\n */\nif (mv) {\n  function RotatingFileStream(options) {\n    this.path = options.path;\n    this.stream = fs.createWriteStream(this.path, {\n      flags: 'a',\n      encoding: 'utf8'\n    });\n    this.count = options.count == null ? 10 : options.count;\n    assert.ok(typeof this.count === 'number' && this.count >= 0);\n\n    // Parse `options.period`.\n    if (options.period) {\n      // <number><scope> where scope is:\n      //    h   hours (at the start of the hour)\n      //    d   days (at the start of the day, i.e. just after midnight)\n      //    w   weeks (at the start of Sunday)\n      //    m   months (on the first of the month)\n      //    y   years (at the start of Jan 1st)\n      // with special values 'hourly' (1h), 'daily' (1d), \"weekly\" (1w),\n      // 'monthly' (1m) and 'yearly' (1y)\n      var period = {\n        'hourly': '1h',\n        'daily': '1d',\n        'weekly': '1w',\n        'monthly': '1m',\n        'yearly': '1y'\n      }[options.period] || options.period;\n      var m = /^([1-9][0-9]*)([hdwmy]|ms)$/.exec(period);\n      if (!m) {\n        throw new Error(format('invalid period: \"%s\"', options.period));\n      }\n      this.periodNum = Number(m[1]);\n      this.periodScope = m[2];\n    } else {\n      this.periodNum = 1;\n      this.periodScope = 'd';\n    }\n\n    // TODO: template support for backup files\n    // template: <path to which to rotate>\n    //      default is %P.%n\n    //      '/var/log/archive/foo.log'  -> foo.log.%n\n    //      '/var/log/archive/foo.log.%n'\n    //      codes:\n    //          XXX support strftime codes (per node version of those)\n    //              or whatever module. Pick non-colliding for extra\n    //              codes\n    //          %P      `path` base value\n    //          %n      integer number of rotated log (1,2,3,...)\n    //          %d      datetime in YYYY-MM-DD_HH-MM-SS\n    //                      XXX what should default date format be?\n    //                          prior art? Want to avoid ':' in\n    //                          filenames (illegal on Windows for one).\n\n    this.rotQueue = [];\n    this.rotating = false;\n    this._setupNextRot();\n  }\n  util.inherits(RotatingFileStream, EventEmitter);\n  RotatingFileStream.prototype._setupNextRot = function () {\n    var self = this;\n    this.rotAt = this._nextRotTime();\n    this.timeout = setTimeout(function () {\n      self.rotate();\n    }, this.rotAt - Date.now());\n  };\n  RotatingFileStream.prototype._nextRotTime = function _nextRotTime(first) {\n    var _DEBUG = false;\n    if (_DEBUG) console.log('-- _nextRotTime: %s%s', this.periodNum, this.periodScope);\n    var d = new Date();\n    if (_DEBUG) console.log('  now local: %s', d);\n    if (_DEBUG) console.log('    now utc: %s', d.toISOString());\n    var rotAt;\n    switch (this.periodScope) {\n      case 'ms':\n        // Hidden millisecond period for debugging.\n        if (this.rotAt) {\n          rotAt = this.rotAt + this.periodNum;\n        } else {\n          rotAt = Date.now() + this.periodNum;\n        }\n        break;\n      case 'h':\n        if (this.rotAt) {\n          rotAt = this.rotAt + this.periodNum * 60 * 60 * 1000;\n        } else {\n          // First time: top of the next hour.\n          rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours() + 1);\n        }\n        break;\n      case 'd':\n        if (this.rotAt) {\n          rotAt = this.rotAt + this.periodNum * 24 * 60 * 60 * 1000;\n        } else {\n          // First time: start of tomorrow (i.e. at the coming midnight) UTC.\n          rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate() + 1);\n        }\n        break;\n      case 'w':\n        // Currently, always on Sunday morning at 00:00:00 (UTC).\n        if (this.rotAt) {\n          rotAt = this.rotAt + this.periodNum * 7 * 24 * 60 * 60 * 1000;\n        } else {\n          // First time: this coming Sunday.\n          rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate() + (7 - d.getUTCDay()));\n        }\n        break;\n      case 'm':\n        if (this.rotAt) {\n          rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth() + this.periodNum, 1);\n        } else {\n          // First time: the start of the next month.\n          rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth() + 1, 1);\n        }\n        break;\n      case 'y':\n        if (this.rotAt) {\n          rotAt = Date.UTC(d.getUTCFullYear() + this.periodNum, 0, 1);\n        } else {\n          // First time: the start of the next year.\n          rotAt = Date.UTC(d.getUTCFullYear() + 1, 0, 1);\n        }\n        break;\n      default:\n        assert.fail(format('invalid period scope: \"%s\"', this.periodScope));\n    }\n    if (_DEBUG) {\n      console.log('  **rotAt**: %s (utc: %s)', rotAt, new Date(rotAt).toUTCString());\n      var now = Date.now();\n      console.log('        now: %s (%sms == %smin == %sh to go)', now, rotAt - now, (rotAt - now) / 1000 / 60, (rotAt - now) / 1000 / 60 / 60);\n    }\n    return rotAt;\n  };\n  RotatingFileStream.prototype.rotate = function rotate() {\n    // XXX What about shutdown?\n    var self = this;\n    var _DEBUG = false;\n    if (_DEBUG) console.log('-- [%s] rotating %s', new Date(), self.path);\n    if (self.rotating) {\n      throw new TypeError('cannot start a rotation when already rotating');\n    }\n    self.rotating = true;\n    self.stream.end(); // XXX can do moves sync after this? test at high rate\n\n    function del() {\n      var toDel = self.path + '.' + String(n - 1);\n      if (n === 0) {\n        toDel = self.path;\n      }\n      n -= 1;\n      if (_DEBUG) console.log('rm %s', toDel);\n      fs.unlink(toDel, function (delErr) {\n        //XXX handle err other than not exists\n        moves();\n      });\n    }\n    function moves() {\n      if (self.count === 0 || n < 0) {\n        return finish();\n      }\n      var before = self.path;\n      var after = self.path + '.' + String(n);\n      if (n > 0) {\n        before += '.' + String(n - 1);\n      }\n      n -= 1;\n      fs.exists(before, function (exists) {\n        if (!exists) {\n          moves();\n        } else {\n          if (_DEBUG) console.log('mv %s %s', before, after);\n          mv(before, after, function (mvErr) {\n            if (mvErr) {\n              self.emit('error', mvErr);\n              finish(); // XXX finish here?\n            } else {\n              moves();\n            }\n          });\n        }\n      });\n    }\n    function finish() {\n      if (_DEBUG) console.log('open %s', self.path);\n      self.stream = fs.createWriteStream(self.path, {\n        flags: 'a',\n        encoding: 'utf8'\n      });\n      var q = self.rotQueue,\n        len = q.length;\n      for (var i = 0; i < len; i++) {\n        self.stream.write(q[i]);\n      }\n      self.rotQueue = [];\n      self.rotating = false;\n      self.emit('drain');\n      self._setupNextRot();\n    }\n    var n = this.count;\n    del();\n  };\n  RotatingFileStream.prototype.write = function write(s) {\n    if (this.rotating) {\n      this.rotQueue.push(s);\n      return false;\n    } else {\n      return this.stream.write(s);\n    }\n  };\n  RotatingFileStream.prototype.end = function end(s) {\n    this.stream.end();\n  };\n  RotatingFileStream.prototype.destroy = function destroy(s) {\n    this.stream.destroy();\n  };\n  RotatingFileStream.prototype.destroySoon = function destroySoon(s) {\n    this.stream.destroySoon();\n  };\n} /* if (mv) */\n\n/**\n * RingBuffer is a Writable Stream that just stores the last N records in\n * memory.\n *\n * @param options {Object}, with the following fields:\n *\n *    - limit: number of records to keep in memory\n */\nfunction RingBuffer(options) {\n  this.limit = options && options.limit ? options.limit : 100;\n  this.writable = true;\n  this.records = [];\n  EventEmitter.call(this);\n}\nutil.inherits(RingBuffer, EventEmitter);\nRingBuffer.prototype.write = function (record) {\n  if (!this.writable) throw new Error('RingBuffer has been ended already');\n  this.records.push(record);\n  if (this.records.length > this.limit) this.records.shift();\n  return true;\n};\nRingBuffer.prototype.end = function () {\n  if (arguments.length > 0) this.write.apply(this, Array.prototype.slice.call(arguments));\n  this.writable = false;\n};\nRingBuffer.prototype.destroy = function () {\n  this.writable = false;\n  this.emit('close');\n};\nRingBuffer.prototype.destroySoon = function () {\n  this.destroy();\n};\n\n//---- Exports\n\nmodule.exports = Logger;\nmodule.exports.TRACE = TRACE;\nmodule.exports.DEBUG = DEBUG;\nmodule.exports.INFO = INFO;\nmodule.exports.WARN = WARN;\nmodule.exports.ERROR = ERROR;\nmodule.exports.FATAL = FATAL;\nmodule.exports.resolveLevel = resolveLevel;\nmodule.exports.VERSION = VERSION;\nmodule.exports.LOG_VERSION = LOG_VERSION;\nmodule.exports.createLogger = function createLogger(options) {\n  return new Logger(options);\n};\nmodule.exports.RingBuffer = RingBuffer;\n\n// Useful for custom `type == 'raw'` streams that may do JSON stringification\n// of log records themselves. Usage:\n//    var str = JSON.stringify(rec, bunyan.safeCycles());\nmodule.exports.safeCycles = safeCycles;","map":{"version":3,"names":["VERSION","LOG_VERSION","xxx","s","args","concat","Array","prototype","slice","call","arguments","console","error","apply","os","require","fs","util","assert","dtrace","e","EventEmitter","mv","objCopy","obj","isArray","copy","Object","keys","forEach","k","format","inspect","formatRegExp","f","objects","i","length","push","join","len","str","String","replace","x","Number","JSON","stringify","safeCycles","getCaller3Info","saveLimit","Error","stackTraceLimit","savePrepare","prepareStackTrace","captureStackTrace","_","stack","caller","file","getFileName","line","getLineNumber","func","getFunctionName","_warn","msg","ok","key","_warned","process","stderr","write","TRACE","DEBUG","INFO","WARN","ERROR","FATAL","levelFromName","dtp","undefined","probes","resolveLevel","nameOrNum","level","toLowerCase","Logger","options","_childOptions","_childSimple","parent","TypeError","name","stream","streams","serializers","_isSimpleChild","_level","src","fields","parentFieldNames","names","self","closeOnExit","POSITIVE_INFINITY","createDTraceProvider","probe","addProbe","enable","addStream","type","path","raw","createWriteStream","flags","encoding","on","err","emit","RotatingFileStream","addSerializers","field","serializer","stdout","_applySerializers","hostname","pid","inherits","child","simple","reopenFileStreams","end","destroySoon","value","newLevel","levels","equal","map","excludeFields","_emit","rec","noemit","haveNonRawStreams","mkLogEmitter","minLevel","log","mkRecord","errSerializer","msgArgs","message","Buffer","isBuffer","recFields","time","Date","v","fire","trace","debug","info","warn","fatal","stdSerializers","req","connection","method","url","headers","remoteAddress","remotePort","res","statusCode","header","_header","getFullErrorStack","ex","ret","toString","cause","cex","code","signal","seen","val","indexOf","count","period","m","exec","periodNum","periodScope","rotQueue","rotating","_setupNextRot","rotAt","_nextRotTime","timeout","setTimeout","rotate","now","first","_DEBUG","d","toISOString","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCDay","fail","toUTCString","del","toDel","n","unlink","delErr","moves","finish","before","after","exists","mvErr","q","destroy","RingBuffer","limit","writable","records","record","shift","module","exports","createLogger"],"sources":["C:/Users/twotr/Desktop/College/vsCode/WorkHumanApplication/country-search/node_modules/bunyan/lib/bunyan.js"],"sourcesContent":["/*\n * Copyright (c) 2013 Trent Mick. All rights reserved.\n * Copyright (c) 2013 Joyent Inc. All rights reserved.\n *\n * The bunyan logging library for node.js.\n *\n * vim: expandtab:ts=4:sw=4\n */\n\nvar VERSION = '0.22.3';\n\n// Bunyan log format version. This becomes the 'v' field on all log records.\n// `0` is until I release a version '1.0.0' of node-bunyan. Thereafter,\n// starting with `1`, this will be incremented if there is any backward\n// incompatible change to the log record format. Details will be in\n// 'CHANGES.md' (the change log).\nvar LOG_VERSION = 0;\n\n\nvar xxx = function xxx(s) {     // internal dev/debug logging\n    var args = ['XX' + 'X: '+s].concat(\n        Array.prototype.slice.call(arguments, 1));\n    console.error.apply(this, args);\n};\nvar xxx = function xxx() {};  // comment out to turn on debug logging\n\n\nvar os = require('os');\nvar fs = require('fs');\nvar util = require('util');\nvar assert = require('assert');\ntry {\n    var dtrace = require('dtrace-provider');\n} catch (e) {\n    dtrace = null;\n}\nvar EventEmitter = require('events').EventEmitter;\n\n// The 'mv' module is required for rotating-file stream support.\ntry {\n    var mv = require('mv');\n} catch (e) {\n    mv = null;\n}\n\n\n\n//---- Internal support stuff\n\nfunction objCopy(obj) {\n    if (obj === null) {\n        return null;\n    } else if (Array.isArray(obj)) {\n        return obj.slice();\n    } else {\n        var copy = {};\n        Object.keys(obj).forEach(function (k) {\n            copy[k] = obj[k];\n        });\n        return copy;\n    }\n}\n\nvar format = util.format;\nif (!format) {\n    // If node < 0.6, then use its `util.format`:\n    // <https://github.com/joyent/node/blob/master/lib/util.js#L22>:\n    var inspect = util.inspect;\n    var formatRegExp = /%[sdj%]/g;\n    format = function format(f) {\n        if (typeof (f) !== 'string') {\n            var objects = [];\n            for (var i = 0; i < arguments.length; i++) {\n                objects.push(inspect(arguments[i]));\n            }\n            return objects.join(' ');\n        }\n\n        var i = 1;\n        var args = arguments;\n        var len = args.length;\n        var str = String(f).replace(formatRegExp, function (x) {\n            if (i >= len)\n                return x;\n            switch (x) {\n                case '%s': return String(args[i++]);\n                case '%d': return Number(args[i++]);\n                case '%j': return JSON.stringify(args[i++], safeCycles());\n                case '%%': return '%';\n                default:\n                    return x;\n            }\n        });\n        for (var x = args[i]; i < len; x = args[++i]) {\n            if (x === null || typeof (x) !== 'object') {\n                str += ' ' + x;\n            } else {\n                str += ' ' + inspect(x);\n            }\n        }\n        return str;\n    };\n}\n\n\n/**\n * Gather some caller info 3 stack levels up.\n * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.\n */\nfunction getCaller3Info() {\n    var obj = {};\n    var saveLimit = Error.stackTraceLimit;\n    var savePrepare = Error.prepareStackTrace;\n    Error.stackTraceLimit = 3;\n    Error.captureStackTrace(this, getCaller3Info);\n    Error.prepareStackTrace = function (_, stack) {\n        var caller = stack[2];\n        obj.file = caller.getFileName();\n        obj.line = caller.getLineNumber();\n        var func = caller.getFunctionName();\n        if (func)\n            obj.func = func;\n    };\n    this.stack;\n    Error.stackTraceLimit = saveLimit;\n    Error.prepareStackTrace = savePrepare;\n    return obj;\n}\n\n\n/**\n * Warn about an bunyan processing error.\n *\n * If file/line are given, this makes an attempt to warn on stderr only once.\n *\n * @param msg {String} Message with which to warn.\n * @param file {String} Optional. File path relevant for the warning.\n * @param line {String} Optional. Line number in `file` path relevant for\n *    the warning.\n */\nfunction _warn(msg, file, line) {\n    assert.ok(msg);\n    var key;\n    if (file && line) {\n        key = file + ':' + line;\n        if (_warned[key]) {\n            return;\n        }\n        _warned[key] = true;\n    }\n    process.stderr.write(msg + '\\n');\n}\nvar _warned = {};\n\n\n\n//---- Levels\n\nvar TRACE = 10;\nvar DEBUG = 20;\nvar INFO = 30;\nvar WARN = 40;\nvar ERROR = 50;\nvar FATAL = 60;\n\nvar levelFromName = {\n    'trace': TRACE,\n    'debug': DEBUG,\n    'info': INFO,\n    'warn': WARN,\n    'error': ERROR,\n    'fatal': FATAL\n};\n\n// Dtrace probes.\nvar dtp = undefined;\nvar probes = dtrace && {};\n\n/**\n * Resolve a level number, name (upper or lowercase) to a level number value.\n *\n * @api public\n */\nfunction resolveLevel(nameOrNum) {\n    var level = (typeof (nameOrNum) === 'string'\n            ? levelFromName[nameOrNum.toLowerCase()]\n            : nameOrNum);\n    if (! (TRACE <= level && level <= FATAL)) {\n        throw new Error('invalid level: ' + nameOrNum);\n    }\n    return level;\n}\n\n\n\n//---- Logger class\n\n/**\n * Create a Logger instance.\n *\n * @param options {Object} See documentation for full details. At minimum\n *    this must include a 'name' string key. Configuration keys:\n *      - `streams`: specify the logger output streams. This is an array of\n *        objects with these fields:\n *          - `type`: The stream type. See README.md for full details.\n *            Often this is implied by the other fields. Examples are\n *            'file', 'stream' and \"raw\".\n *          - `level`: Defaults to 'info'.\n *          - `path` or `stream`: The specify the file path or writeable\n *            stream to which log records are written. E.g.\n *            `stream: process.stdout`.\n *          - `closeOnExit` (boolean): Optional. Default is true for a\n *            'file' stream when `path` is given, false otherwise.\n *        See README.md for full details.\n *      - `level`: set the level for a single output stream (cannot be used\n *        with `streams`)\n *      - `stream`: the output stream for a logger with just one, e.g.\n *        `process.stdout` (cannot be used with `streams`)\n *      - `serializers`: object mapping log record field names to\n *        serializing functions. See README.md for details.\n *      - `src`: Boolean (default false). Set true to enable 'src' automatic\n *        field with log call source info.\n *    All other keys are log record fields.\n *\n * An alternative *internal* call signature is used for creating a child:\n *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);\n *\n * @param _childSimple (Boolean) An assertion that the given `_childOptions`\n *    (a) only add fields (no config) and (b) no serialization handling is\n *    required for them. IOW, this is a fast path for frequent child\n *    creation.\n */\nfunction Logger(options, _childOptions, _childSimple) {\n    xxx('Logger start:', options)\n    if (! this instanceof Logger) {\n        return new Logger(options, _childOptions);\n    }\n\n    // Input arg validation.\n    var parent;\n    if (_childOptions !== undefined) {\n        parent = options;\n        options = _childOptions;\n        if (! parent instanceof Logger) {\n            throw new TypeError(\n                'invalid Logger creation: do not pass a second arg');\n        }\n    }\n    if (!options) {\n        throw new TypeError('options (object) is required');\n    }\n    if (!parent) {\n        if (!options.name) {\n            throw new TypeError('options.name (string) is required');\n        }\n    } else {\n        if (options.name) {\n            throw new TypeError(\n                'invalid options.name: child cannot set logger name');\n        }\n    }\n    if (options.stream && options.streams) {\n        throw new TypeError('cannot mix \"streams\" and \"stream\" options');\n    }\n    if (options.streams && !Array.isArray(options.streams)) {\n        throw new TypeError('invalid options.streams: must be an array')\n    }\n    if (options.serializers && (typeof (options.serializers) !== 'object' ||\n            Array.isArray(options.serializers))) {\n        throw new TypeError('invalid options.serializers: must be an object')\n    }\n\n    EventEmitter.call(this);\n\n    // Fast path for simple child creation.\n    if (parent && _childSimple) {\n        // `_isSimpleChild` is a signal to stream close handling that this child\n        // owns none of its streams.\n        this._isSimpleChild = true;\n\n        this._level = parent._level;\n        this.streams = parent.streams;\n        this.serializers = parent.serializers;\n        this.src = parent.src;\n        var fields = this.fields = {};\n        var parentFieldNames = Object.keys(parent.fields);\n        for (var i = 0; i < parentFieldNames.length; i++) {\n            var name = parentFieldNames[i];\n            fields[name] = parent.fields[name];\n        }\n        var names = Object.keys(options);\n        for (var i = 0; i < names.length; i++) {\n            var name = names[i];\n            fields[name] = options[name];\n        }\n        return;\n    }\n\n    // Null values.\n    var self = this;\n    if (parent) {\n        this._level = parent._level;\n        this.streams = [];\n        for (var i = 0; i < parent.streams.length; i++) {\n            var s = objCopy(parent.streams[i]);\n            s.closeOnExit = false; // Don't own parent stream.\n            this.streams.push(s);\n        }\n        this.serializers = objCopy(parent.serializers);\n        this.src = parent.src;\n        this.fields = objCopy(parent.fields);\n        if (options.level) {\n            this.level(options.level);\n        }\n    } else {\n        this._level = Number.POSITIVE_INFINITY;\n        this.streams = [];\n        this.serializers = null;\n        this.src = false;\n        this.fields = {};\n    }\n\n    if (!dtp && dtrace) {\n        dtp = dtrace.createDTraceProvider('bunyan');\n\n        for (var level in levelFromName) {\n            var probe;\n\n            probes[levelFromName[level]] = probe =\n                dtp.addProbe('log-' + level, 'char *');\n\n            // Explicitly add a reference to dtp to prevent it from being GC'd\n            probe.dtp = dtp;\n        }\n\n        dtp.enable();\n    }\n\n    // Helpers\n    function addStream(s) {\n        s = objCopy(s);\n\n        // Implicit 'type' from other args.\n        var type = s.type;\n        if (!s.type) {\n            if (s.stream) {\n                s.type = 'stream';\n            } else if (s.path) {\n                s.type = 'file'\n            }\n        }\n        s.raw = (s.type === 'raw');  // PERF: Allow for faster check in `_emit`.\n\n        if (s.level) {\n            s.level = resolveLevel(s.level);\n        } else if (options.level) {\n            s.level = resolveLevel(options.level);\n        } else {\n            s.level = INFO;\n        }\n        if (s.level < self._level) {\n            self._level = s.level;\n        }\n\n        switch (s.type) {\n        case 'stream':\n            if (!s.closeOnExit) {\n                s.closeOnExit = false;\n            }\n            break;\n        case 'file':\n            if (!s.stream) {\n                s.stream = fs.createWriteStream(s.path,\n                    {flags: 'a', encoding: 'utf8'});\n                s.stream.on('error', function (err) {\n                    self.emit('error', err, s);\n                });\n                if (!s.closeOnExit) {\n                    s.closeOnExit = true;\n                }\n            } else {\n                if (!s.closeOnExit) {\n                    s.closeOnExit = false;\n                }\n            }\n            break;\n        case 'rotating-file':\n            assert.ok(!s.stream,\n                '\"rotating-file\" stream should not give a \"stream\"');\n            assert.ok(s.path);\n            assert.ok(mv, '\"rotating-file\" stream type is not supported: '\n                + 'missing \"mv\" module');\n            s.stream = new RotatingFileStream(s);\n            if (!s.closeOnExit) {\n                s.closeOnExit = true;\n            }\n            break;\n        case 'raw':\n            if (!s.closeOnExit) {\n                s.closeOnExit = false;\n            }\n            break;\n        default:\n            throw new TypeError('unknown stream type \"' + s.type + '\"');\n        }\n\n        self.streams.push(s);\n    }\n\n    function addSerializers(serializers) {\n        if (!self.serializers) {\n            self.serializers = {};\n        }\n        Object.keys(serializers).forEach(function (field) {\n            var serializer = serializers[field];\n            if (typeof (serializer) !== 'function') {\n                throw new TypeError(format(\n                    'invalid serializer for \"%s\" field: must be a function',\n                    field));\n            } else {\n                self.serializers[field] = serializer;\n            }\n        });\n    }\n\n    // Handle *config* options (i.e. options that are not just plain data\n    // for log records).\n    if (options.stream) {\n        addStream({\n            type: 'stream',\n            stream: options.stream,\n            closeOnExit: false,\n            level: (options.level ? resolveLevel(options.level) : INFO)\n        });\n    } else if (options.streams) {\n        options.streams.forEach(addStream);\n    } else if (parent && options.level) {\n        this.level(options.level);\n    } else if (!parent) {\n        addStream({\n            type: 'stream',\n            stream: process.stdout,\n            closeOnExit: false,\n            level: (options.level ? resolveLevel(options.level) : INFO)\n        });\n    }\n    if (options.serializers) {\n        addSerializers(options.serializers);\n    }\n    if (options.src) {\n        this.src = true;\n    }\n    xxx('Logger: ', self)\n\n    // Fields.\n    // These are the default fields for log records (minus the attributes\n    // removed in this constructor). To allow storing raw log records\n    // (unrendered), `this.fields` must never be mutated. Create a copy for\n    // any changes.\n    var fields = objCopy(options);\n    delete fields.stream;\n    delete fields.level;\n    delete fields.streams;\n    delete fields.serializers;\n    delete fields.src;\n    if (this.serializers) {\n        this._applySerializers(fields);\n    }\n    if (!fields.hostname) {\n        fields.hostname = os.hostname();\n    }\n    if (!fields.pid) {\n        fields.pid = process.pid;\n    }\n    Object.keys(fields).forEach(function (k) {\n        self.fields[k] = fields[k];\n    });\n}\n\nutil.inherits(Logger, EventEmitter);\n\n\n/**\n * Create a child logger, typically to add a few log record fields.\n *\n * This can be useful when passing a logger to a sub-component, e.g. a\n * 'wuzzle' component of your service:\n *\n *    var wuzzleLog = log.child({component: 'wuzzle'})\n *    var wuzzle = new Wuzzle({..., log: wuzzleLog})\n *\n * Then log records from the wuzzle code will have the same structure as\n * the app log, *plus the component='wuzzle' field*.\n *\n * @param options {Object} Optional. Set of options to apply to the child.\n *    All of the same options for a new Logger apply here. Notes:\n *      - The parent's streams are inherited and cannot be removed in this\n *        call. Any given `streams` are *added* to the set inherited from\n *        the parent.\n *      - The parent's serializers are inherited, though can effectively be\n *        overwritten by using duplicate keys.\n *      - Can use `level` to set the level of the streams inherited from\n *        the parent. The level for the parent is NOT affected.\n * @param simple {Boolean} Optional. Set to true to assert that `options`\n *    (a) only add fields (no config) and (b) no serialization handling is\n *    required for them. IOW, this is a fast path for frequent child\n *    creation. See 'tools/timechild.js' for numbers.\n */\nLogger.prototype.child = function (options, simple) {\n    return new Logger(this, options || {}, simple);\n}\n\n\n/**\n * A convenience method to reopen 'file' streams on a logger. This can be\n * useful with external log rotation utilities that move and re-open log files\n * (e.g. logrotate on Linux, logadm on SmartOS/Illumos). Those utilities\n * typically have rotation options to copy-and-truncate the log file, but\n * you may not want to use that. An alternative is to do this in your\n * application:\n *\n *      var log = bunyan.createLogger(...);\n *      ...\n *      process.on('SIGUSR2', function () {\n *          log.reopenFileStreams();\n *      });\n *      ...\n *\n * See <https://github.com/trentm/node-bunyan/issues/104>.\n */\nLogger.prototype.reopenFileStreams = function () {\n    var self = this;\n    self.streams.forEach(function (s) {\n        if (s.type === 'file') {\n            if (s.stream) {\n                // Not sure if typically would want this, or more immediate\n                // `s.stream.destroy()`.\n                s.stream.end();\n                s.stream.destroySoon();\n                delete s.stream;\n            }\n            s.stream = fs.createWriteStream(s.path,\n                {flags: 'a', encoding: 'utf8'});\n            s.stream.on('error', function (err) {\n                self.emit('error', err, s);\n            });\n        }\n    });\n};\n\n\n/* BEGIN JSSTYLED */\n/**\n * Close this logger.\n *\n * This closes streams (that it owns, as per 'endOnClose' attributes on\n * streams), etc. Typically you **don't** need to bother calling this.\nLogger.prototype.close = function () {\n    if (this._closed) {\n        return;\n    }\n    if (!this._isSimpleChild) {\n        self.streams.forEach(function (s) {\n            if (s.endOnClose) {\n                xxx('closing stream s:', s);\n                s.stream.end();\n                s.endOnClose = false;\n            }\n        });\n    }\n    this._closed = true;\n}\n */\n/* END JSSTYLED */\n\n\n/**\n * Get/set the level of all streams on this logger.\n *\n * Get Usage:\n *    // Returns the current log level (lowest level of all its streams).\n *    log.level() -> INFO\n *\n * Set Usage:\n *    log.level(INFO)       // set all streams to level INFO\n *    log.level('info')     // can use 'info' et al aliases\n */\nLogger.prototype.level = function level(value) {\n    if (value === undefined) {\n        return this._level;\n    }\n    var newLevel = resolveLevel(value);\n    var len = this.streams.length;\n    for (var i = 0; i < len; i++) {\n        this.streams[i].level = newLevel;\n    }\n    this._level = newLevel;\n}\n\n\n/**\n * Get/set the level of a particular stream on this logger.\n *\n * Get Usage:\n *    // Returns an array of the levels of each stream.\n *    log.levels() -> [TRACE, INFO]\n *\n *    // Returns a level of the identified stream.\n *    log.levels(0) -> TRACE      // level of stream at index 0\n *    log.levels('foo')           // level of stream with name 'foo'\n *\n * Set Usage:\n *    log.levels(0, INFO)         // set level of stream 0 to INFO\n *    log.levels(0, 'info')       // can use 'info' et al aliases\n *    log.levels('foo', WARN)     // set stream named 'foo' to WARN\n *\n * Stream names: When streams are defined, they can optionally be given\n * a name. For example,\n *       log = new Logger({\n *         streams: [\n *           {\n *             name: 'foo',\n *             path: '/var/log/my-service/foo.log'\n *             level: 'trace'\n *           },\n *         ...\n *\n * @param name {String|Number} The stream index or name.\n * @param value {Number|String} The level value (INFO) or alias ('info').\n *    If not given, this is a 'get' operation.\n * @throws {Error} If there is no stream with the given name.\n */\nLogger.prototype.levels = function levels(name, value) {\n    if (name === undefined) {\n        assert.equal(value, undefined);\n        return this.streams.map(\n            function (s) { return s.level });\n    }\n    var stream;\n    if (typeof (name) === 'number') {\n        stream = this.streams[name];\n        if (stream === undefined) {\n            throw new Error('invalid stream index: ' + name);\n        }\n    } else {\n        var len = this.streams.length;\n        for (var i = 0; i < len; i++) {\n            var s = this.streams[i];\n            if (s.name === name) {\n                stream = s;\n                break;\n            }\n        }\n        if (!stream) {\n            throw new Error(format('no stream with name \"%s\"', name));\n        }\n    }\n    if (value === undefined) {\n        return stream.level;\n    } else {\n        var newLevel = resolveLevel(value);\n        stream.level = newLevel;\n        if (newLevel < this._level) {\n            this._level = newLevel;\n        }\n    }\n}\n\n\n/**\n * Apply registered serializers to the appropriate keys in the given fields.\n *\n * Pre-condition: This is only called if there is at least one serializer.\n *\n * @param fields (Object) The log record fields.\n * @param excludeFields (Object) Optional mapping of keys to `true` for\n *    keys to NOT apply a serializer.\n */\nLogger.prototype._applySerializers = function (fields, excludeFields) {\n    var self = this;\n\n    xxx('_applySerializers: excludeFields', excludeFields);\n\n    // Check each serializer against these (presuming number of serializers\n    // is typically less than number of fields).\n    Object.keys(this.serializers).forEach(function (name) {\n        if (fields[name] === undefined ||\n            (excludeFields && excludeFields[name]))\n        {\n            return;\n        }\n        xxx('_applySerializers; apply to \"%s\" key', name)\n        try {\n            fields[name] = self.serializers[name](fields[name]);\n        } catch (err) {\n            _warn(format('bunyan: ERROR: This should never happen. '\n                + 'This is a bug in <https://github.com/trentm/node-bunyan> '\n                + 'or in this application. Exception from \"%s\" Logger '\n                + 'serializer: %s',\n                name, err.stack || err));\n            fields[name] = format('(Error in Bunyan log \"%s\" serializer '\n                + 'broke field. See stderr for details.)', name);\n        }\n    });\n}\n\n\n/**\n * Emit a log record.\n *\n * @param rec {log record}\n * @param noemit {Boolean} Optional. Set to true to skip emission\n *      and just return the JSON string.\n */\nLogger.prototype._emit = function (rec, noemit) {\n    var i;\n\n    // Lazily determine if this Logger has non-'raw' streams. If there are\n    // any, then we need to stringify the log record.\n    if (this.haveNonRawStreams === undefined) {\n        this.haveNonRawStreams = false;\n        for (i = 0; i < this.streams.length; i++) {\n            if (!this.streams[i].raw) {\n                this.haveNonRawStreams = true;\n                break;\n            }\n        }\n    }\n\n    // Stringify the object. Attempt to warn/recover on error.\n    var str;\n    if (noemit || this.haveNonRawStreams) {\n        str = JSON.stringify(rec, safeCycles()) + '\\n';\n    }\n\n    if (noemit)\n        return str;\n\n    var level = rec.level;\n    for (i = 0; i < this.streams.length; i++) {\n        var s = this.streams[i];\n        if (s.level <= level) {\n            xxx('writing log rec \"%s\" to \"%s\" stream (%d <= %d): %j',\n                rec.msg, s.type, s.level, level, rec);\n            s.stream.write(s.raw ? rec : str);\n        }\n    };\n\n    return str;\n}\n\n\n/**\n * Build a log emitter function for level minLevel. I.e. this is the\n * creator of `log.info`, `log.error`, etc.\n */\nfunction mkLogEmitter(minLevel) {\n    return function () {\n        var log = this;\n\n        function mkRecord(args) {\n            var excludeFields;\n            if (args[0] instanceof Error) {\n                // `log.<level>(err, ...)`\n                fields = {err: errSerializer(args[0])};\n                excludeFields = {err: true};\n                if (args.length === 1) {\n                    msgArgs = [fields.err.message];\n                } else {\n                    msgArgs = Array.prototype.slice.call(args, 1);\n                }\n            } else if (typeof (args[0]) === 'string' ||\n                       typeof (args[0]) === 'number') {\n                // `log.<level>(msg, ...)`\n                fields = null;\n                msgArgs = Array.prototype.slice.call(args);\n            } else if (Buffer.isBuffer(args[0])) {  // `log.<level>(buf, ...)`\n                // Almost certainly an error, show `inspect(buf)`. See bunyan\n                // issue #35.\n                fields = null;\n                msgArgs = Array.prototype.slice.call(args);\n                msgArgs[0] = util.inspect(msgArgs[0]);\n            } else {  // `log.<level>(fields, msg, ...)`\n                fields = args[0];\n                msgArgs = Array.prototype.slice.call(args, 1);\n            }\n\n            // Build up the record object.\n            var rec = objCopy(log.fields);\n            var level = rec.level = minLevel;\n            var recFields = (fields ? objCopy(fields) : null);\n            if (recFields) {\n                if (log.serializers) {\n                    log._applySerializers(recFields, excludeFields);\n                }\n                Object.keys(recFields).forEach(function (k) {\n                    rec[k] = recFields[k];\n                });\n            }\n            rec.msg = format.apply(log, msgArgs);\n            if (!rec.time) {\n                rec.time = (new Date());\n            }\n            // Get call source info\n            if (log.src && !rec.src) {\n                rec.src = getCaller3Info()\n            }\n            rec.v = LOG_VERSION;\n\n            return rec;\n        };\n\n        var fields = null;\n        var msgArgs = arguments;\n        var str = null;\n        var rec = null;\n        if (arguments.length === 0) {   // `log.<level>()`\n            return (this._level <= minLevel);\n        } else if (this._level > minLevel) {\n            /* pass through */\n        } else {\n            rec = mkRecord(msgArgs);\n            str = this._emit(rec);\n        }\n        probes && probes[minLevel].fire(function () {\n                return [ str ||\n                    (rec && log._emit(rec, true)) ||\n                    log._emit(mkRecord(msgArgs), true) ];\n        });\n    }\n}\n\n\n/**\n * The functions below log a record at a specific level.\n *\n * Usages:\n *    log.<level>()  -> boolean is-trace-enabled\n *    log.<level>(<Error> err, [<string> msg, ...])\n *    log.<level>(<string> msg, ...)\n *    log.<level>(<object> fields, <string> msg, ...)\n *\n * where <level> is the lowercase version of the log level. E.g.:\n *\n *    log.info()\n *\n * @params fields {Object} Optional set of additional fields to log.\n * @params msg {String} Log message. This can be followed by additional\n *    arguments that are handled like\n *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).\n */\nLogger.prototype.trace = mkLogEmitter(TRACE);\nLogger.prototype.debug = mkLogEmitter(DEBUG);\nLogger.prototype.info = mkLogEmitter(INFO);\nLogger.prototype.warn = mkLogEmitter(WARN);\nLogger.prototype.error = mkLogEmitter(ERROR);\nLogger.prototype.fatal = mkLogEmitter(FATAL);\n\n\n\n//---- Standard serializers\n// A serializer is a function that serializes a JavaScript object to a\n// JSON representation for logging. There is a standard set of presumed\n// interesting objects in node.js-land.\n\nLogger.stdSerializers = {};\n\n// Serialize an HTTP request.\nLogger.stdSerializers.req = function req(req) {\n    if (!req || !req.connection)\n        return req;\n    return {\n        method: req.method,\n        url: req.url,\n        headers: req.headers,\n        remoteAddress: req.connection.remoteAddress,\n        remotePort: req.connection.remotePort\n    };\n    // Trailers: Skipping for speed. If you need trailers in your app, then\n    // make a custom serializer.\n    //if (Object.keys(trailers).length > 0) {\n    //  obj.trailers = req.trailers;\n    //}\n};\n\n// Serialize an HTTP response.\nLogger.stdSerializers.res = function res(res) {\n    if (!res || !res.statusCode)\n        return res;\n    return {\n        statusCode: res.statusCode,\n        header: res._header\n    }\n};\n\n\n/*\n * This function dumps long stack traces for exceptions having a cause()\n * method. The error classes from\n * [verror](https://github.com/davepacheco/node-verror) and\n * [restify v2.0](https://github.com/mcavage/node-restify) are examples.\n *\n * Based on `dumpException` in\n * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js\n */\nfunction getFullErrorStack(ex)\n{\n    var ret = ex.stack || ex.toString();\n    if (ex.cause && typeof (ex.cause) === 'function') {\n        var cex = ex.cause();\n        if (cex) {\n            ret += '\\nCaused by: ' + getFullErrorStack(cex);\n        }\n    }\n    return (ret);\n}\n\n// Serialize an Error object\n// (Core error properties are enumerable in node 0.4, not in 0.6).\nvar errSerializer = Logger.stdSerializers.err = function err(err) {\n    if (!err || !err.stack)\n        return err;\n    var obj = {\n        message: err.message,\n        name: err.name,\n        stack: getFullErrorStack(err),\n        code: err.code,\n        signal: err.signal\n    }\n    return obj;\n};\n\n\n// A JSON stringifier that handles cycles safely.\n// Usage: JSON.stringify(obj, safeCycles())\nfunction safeCycles() {\n    var seen = [];\n    return function (key, val) {\n        if (!val || typeof (val) !== 'object') {\n            return val;\n        }\n        if (seen.indexOf(val) !== -1) {\n            return '[Circular]';\n        }\n        seen.push(val);\n        return val;\n    };\n}\n\n\n/**\n * XXX\n */\nif (mv) {\n\nfunction RotatingFileStream(options) {\n    this.path = options.path;\n    this.stream = fs.createWriteStream(this.path,\n        {flags: 'a', encoding: 'utf8'});\n    this.count = (options.count == null ? 10 : options.count);\n    assert.ok(typeof (this.count) === 'number' && this.count >= 0);\n\n    // Parse `options.period`.\n    if (options.period) {\n        // <number><scope> where scope is:\n        //    h   hours (at the start of the hour)\n        //    d   days (at the start of the day, i.e. just after midnight)\n        //    w   weeks (at the start of Sunday)\n        //    m   months (on the first of the month)\n        //    y   years (at the start of Jan 1st)\n        // with special values 'hourly' (1h), 'daily' (1d), \"weekly\" (1w),\n        // 'monthly' (1m) and 'yearly' (1y)\n        var period = {\n            'hourly': '1h',\n            'daily': '1d',\n            'weekly': '1w',\n            'monthly': '1m',\n            'yearly': '1y'\n        }[options.period] || options.period;\n        var m = /^([1-9][0-9]*)([hdwmy]|ms)$/.exec(period);\n        if (!m) {\n            throw new Error(format('invalid period: \"%s\"', options.period));\n        }\n        this.periodNum = Number(m[1]);\n        this.periodScope = m[2];\n    } else {\n        this.periodNum = 1;\n        this.periodScope = 'd';\n    }\n\n    // TODO: template support for backup files\n    // template: <path to which to rotate>\n    //      default is %P.%n\n    //      '/var/log/archive/foo.log'  -> foo.log.%n\n    //      '/var/log/archive/foo.log.%n'\n    //      codes:\n    //          XXX support strftime codes (per node version of those)\n    //              or whatever module. Pick non-colliding for extra\n    //              codes\n    //          %P      `path` base value\n    //          %n      integer number of rotated log (1,2,3,...)\n    //          %d      datetime in YYYY-MM-DD_HH-MM-SS\n    //                      XXX what should default date format be?\n    //                          prior art? Want to avoid ':' in\n    //                          filenames (illegal on Windows for one).\n\n    this.rotQueue = [];\n    this.rotating = false;\n    this._setupNextRot();\n}\n\nutil.inherits(RotatingFileStream, EventEmitter);\n\nRotatingFileStream.prototype._setupNextRot = function () {\n    var self = this;\n    this.rotAt = this._nextRotTime();\n    this.timeout = setTimeout(\n        function () { self.rotate(); },\n        this.rotAt - Date.now());\n}\n\nRotatingFileStream.prototype._nextRotTime = function _nextRotTime(first) {\n    var _DEBUG = false;\n    if (_DEBUG)\n        console.log('-- _nextRotTime: %s%s', this.periodNum, this.periodScope);\n    var d = new Date();\n\n    if (_DEBUG) console.log('  now local: %s', d);\n    if (_DEBUG) console.log('    now utc: %s', d.toISOString());\n    var rotAt;\n    switch (this.periodScope) {\n    case 'ms':\n        // Hidden millisecond period for debugging.\n        if (this.rotAt) {\n            rotAt = this.rotAt + this.periodNum;\n        } else {\n            rotAt = Date.now() + this.periodNum;\n        }\n        break;\n    case 'h':\n        if (this.rotAt) {\n            rotAt = this.rotAt + this.periodNum * 60 * 60 * 1000;\n        } else {\n            // First time: top of the next hour.\n            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),\n                d.getUTCDate(), d.getUTCHours() + 1);\n        }\n        break;\n    case 'd':\n        if (this.rotAt) {\n            rotAt = this.rotAt + this.periodNum * 24 * 60 * 60 * 1000;\n        } else {\n            // First time: start of tomorrow (i.e. at the coming midnight) UTC.\n            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),\n                d.getUTCDate() + 1);\n        }\n        break;\n    case 'w':\n        // Currently, always on Sunday morning at 00:00:00 (UTC).\n        if (this.rotAt) {\n            rotAt = this.rotAt + this.periodNum * 7 * 24 * 60 * 60 * 1000;\n        } else {\n            // First time: this coming Sunday.\n            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),\n                d.getUTCDate() + (7 - d.getUTCDay()));\n        }\n        break;\n    case 'm':\n        if (this.rotAt) {\n            rotAt = Date.UTC(d.getUTCFullYear(),\n                d.getUTCMonth() + this.periodNum, 1);\n        } else {\n            // First time: the start of the next month.\n            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth() + 1, 1);\n        }\n        break;\n    case 'y':\n        if (this.rotAt) {\n            rotAt = Date.UTC(d.getUTCFullYear() + this.periodNum, 0, 1);\n        } else {\n            // First time: the start of the next year.\n            rotAt = Date.UTC(d.getUTCFullYear() + 1, 0, 1);\n        }\n        break;\n    default:\n        assert.fail(format('invalid period scope: \"%s\"', this.periodScope));\n    }\n\n    if (_DEBUG) {\n        console.log('  **rotAt**: %s (utc: %s)', rotAt,\n            new Date(rotAt).toUTCString());\n        var now = Date.now();\n        console.log('        now: %s (%sms == %smin == %sh to go)',\n            now,\n            rotAt - now,\n            (rotAt-now)/1000/60,\n            (rotAt-now)/1000/60/60);\n    }\n    return rotAt;\n};\n\nRotatingFileStream.prototype.rotate = function rotate() {\n    // XXX What about shutdown?\n    var self = this;\n    var _DEBUG = false;\n\n    if (_DEBUG) console.log('-- [%s] rotating %s', new Date(), self.path);\n    if (self.rotating) {\n        throw new TypeError('cannot start a rotation when already rotating');\n    }\n    self.rotating = true;\n\n    self.stream.end();  // XXX can do moves sync after this? test at high rate\n\n    function del() {\n        var toDel = self.path + '.' + String(n - 1);\n        if (n === 0) {\n            toDel = self.path;\n        }\n        n -= 1;\n        if (_DEBUG) console.log('rm %s', toDel);\n        fs.unlink(toDel, function (delErr) {\n            //XXX handle err other than not exists\n            moves();\n        });\n    }\n\n    function moves() {\n        if (self.count === 0 || n < 0) {\n            return finish();\n        }\n        var before = self.path;\n        var after = self.path + '.' + String(n);\n        if (n > 0) {\n            before += '.' + String(n - 1);\n        }\n        n -= 1;\n        fs.exists(before, function (exists) {\n            if (!exists) {\n                moves();\n            } else {\n                if (_DEBUG) console.log('mv %s %s', before, after);\n                mv(before, after, function (mvErr) {\n                    if (mvErr) {\n                        self.emit('error', mvErr);\n                        finish(); // XXX finish here?\n                    } else {\n                        moves();\n                    }\n                });\n            }\n        })\n    }\n\n    function finish() {\n        if (_DEBUG) console.log('open %s', self.path);\n        self.stream = fs.createWriteStream(self.path,\n            {flags: 'a', encoding: 'utf8'});\n        var q = self.rotQueue, len = q.length;\n        for (var i = 0; i < len; i++) {\n            self.stream.write(q[i]);\n        }\n        self.rotQueue = [];\n        self.rotating = false;\n        self.emit('drain');\n        self._setupNextRot();\n    }\n\n    var n = this.count;\n    del();\n};\n\nRotatingFileStream.prototype.write = function write(s) {\n    if (this.rotating) {\n        this.rotQueue.push(s);\n        return false;\n    } else {\n        return this.stream.write(s);\n    }\n};\n\nRotatingFileStream.prototype.end = function end(s) {\n    this.stream.end();\n};\n\nRotatingFileStream.prototype.destroy = function destroy(s) {\n    this.stream.destroy();\n};\n\nRotatingFileStream.prototype.destroySoon = function destroySoon(s) {\n    this.stream.destroySoon();\n};\n\n} /* if (mv) */\n\n\n\n/**\n * RingBuffer is a Writable Stream that just stores the last N records in\n * memory.\n *\n * @param options {Object}, with the following fields:\n *\n *    - limit: number of records to keep in memory\n */\nfunction RingBuffer(options) {\n    this.limit = options && options.limit ? options.limit : 100;\n    this.writable = true;\n    this.records = [];\n    EventEmitter.call(this);\n}\n\nutil.inherits(RingBuffer, EventEmitter);\n\nRingBuffer.prototype.write = function (record) {\n    if (!this.writable)\n        throw (new Error('RingBuffer has been ended already'));\n\n    this.records.push(record);\n\n    if (this.records.length > this.limit)\n        this.records.shift();\n\n    return (true);\n};\n\nRingBuffer.prototype.end = function () {\n    if (arguments.length > 0)\n        this.write.apply(this, Array.prototype.slice.call(arguments));\n    this.writable = false;\n};\n\nRingBuffer.prototype.destroy = function () {\n    this.writable = false;\n    this.emit('close');\n};\n\nRingBuffer.prototype.destroySoon = function () {\n    this.destroy();\n};\n\n\n//---- Exports\n\nmodule.exports = Logger;\n\nmodule.exports.TRACE = TRACE;\nmodule.exports.DEBUG = DEBUG;\nmodule.exports.INFO = INFO;\nmodule.exports.WARN = WARN;\nmodule.exports.ERROR = ERROR;\nmodule.exports.FATAL = FATAL;\nmodule.exports.resolveLevel = resolveLevel;\n\nmodule.exports.VERSION = VERSION;\nmodule.exports.LOG_VERSION = LOG_VERSION;\n\nmodule.exports.createLogger = function createLogger(options) {\n    return new Logger(options);\n};\n\nmodule.exports.RingBuffer = RingBuffer;\n\n// Useful for custom `type == 'raw'` streams that may do JSON stringification\n// of log records themselves. Usage:\n//    var str = JSON.stringify(rec, bunyan.safeCycles());\nmodule.exports.safeCycles = safeCycles;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}