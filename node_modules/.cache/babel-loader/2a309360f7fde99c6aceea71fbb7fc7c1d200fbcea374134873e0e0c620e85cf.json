{"ast":null,"code":"/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function (define) {\n  'use strict';\n\n  define(function () {\n    return function array(Promise) {\n      var arrayMap = Array.prototype.map;\n      var arrayReduce = Array.prototype.reduce;\n      var arrayReduceRight = Array.prototype.reduceRight;\n      var arrayForEach = Array.prototype.forEach;\n      var toPromise = Promise.resolve;\n      var all = Promise.all;\n\n      // Additional array combinators\n\n      Promise.any = any;\n      Promise.some = some;\n      Promise.settle = settle;\n      Promise.map = map;\n      Promise.reduce = reduce;\n      Promise.reduceRight = reduceRight;\n\n      /**\n       * When this promise fulfills with an array, do\n       * onFulfilled.apply(void 0, array)\n       * @param (function) onFulfilled function to apply\n       * @returns {Promise} promise for the result of applying onFulfilled\n       */\n      Promise.prototype.spread = function (onFulfilled) {\n        return this.then(all).then(function (array) {\n          return onFulfilled.apply(void 0, array);\n        });\n      };\n      return Promise;\n\n      /**\n       * One-winner competitive race.\n       * Return a promise that will fulfill when one of the promises\n       * in the input array fulfills, or will reject when all promises\n       * have rejected.\n       * @param {array} promises\n       * @returns {Promise} promise for the first fulfilled value\n       */\n      function any(promises) {\n        return new Promise(function (resolve, reject) {\n          var pending = 0;\n          var errors = [];\n          arrayForEach.call(promises, function (p) {\n            ++pending;\n            toPromise(p).then(resolve, handleReject);\n          });\n          if (pending === 0) {\n            resolve();\n          }\n          function handleReject(e) {\n            errors.push(e);\n            if (--pending === 0) {\n              reject(errors);\n            }\n          }\n        });\n      }\n\n      /**\n       * N-winner competitive race\n       * Return a promise that will fulfill when n input promises have\n       * fulfilled, or will reject when it becomes impossible for n\n       * input promises to fulfill (ie when promises.length - n + 1\n       * have rejected)\n       * @param {array} promises\n       * @param {number} n\n       * @returns {Promise} promise for the earliest n fulfillment values\n       */\n      function some(promises, n) {\n        return new Promise(function (resolve, reject, notify) {\n          var nFulfill = 0;\n          var nReject;\n          var results = [];\n          var errors = [];\n          arrayForEach.call(promises, function (p) {\n            ++nFulfill;\n            toPromise(p).then(handleResolve, handleReject, notify);\n          });\n          n = Math.max(n, 0);\n          nReject = nFulfill - n + 1;\n          nFulfill = Math.min(n, nFulfill);\n          if (nFulfill === 0) {\n            resolve(results);\n            return;\n          }\n          function handleResolve(x) {\n            if (nFulfill > 0) {\n              --nFulfill;\n              results.push(x);\n              if (nFulfill === 0) {\n                resolve(results);\n              }\n            }\n          }\n          function handleReject(e) {\n            if (nReject > 0) {\n              --nReject;\n              errors.push(e);\n              if (nReject === 0) {\n                reject(errors);\n              }\n            }\n          }\n        });\n      }\n\n      /**\n       * Apply f to the value of each promise in a list of promises\n       * and return a new list containing the results.\n       * @param {array} promises\n       * @param {function} f\n       * @param {function} fallback\n       * @returns {Promise}\n       */\n      function map(promises, f, fallback) {\n        return all(arrayMap.call(promises, function (x) {\n          return toPromise(x).then(f, fallback);\n        }));\n      }\n\n      /**\n       * Return a promise that will always fulfill with an array containing\n       * the outcome states of all input promises.  The returned promise\n       * will never reject.\n       * @param {array} promises\n       * @returns {Promise}\n       */\n      function settle(promises) {\n        return all(arrayMap.call(promises, function (p) {\n          p = toPromise(p);\n          return p.then(inspect, inspect);\n          function inspect() {\n            return p.inspect();\n          }\n        }));\n      }\n      function reduce(promises, f) {\n        return arguments.length > 2 ? arrayReduce.call(promises, reducer, arguments[2]) : arrayReduce.call(promises, reducer);\n        function reducer(result, x, i) {\n          return toPromise(result).then(function (r) {\n            return toPromise(x).then(function (x) {\n              return f(r, x, i);\n            });\n          });\n        }\n      }\n      function reduceRight(promises, f) {\n        return arguments.length > 2 ? arrayReduceRight.call(promises, reducer, arguments[2]) : arrayReduceRight.call(promises, reducer);\n        function reducer(result, x, i) {\n          return toPromise(result).then(function (r) {\n            return toPromise(x).then(function (x) {\n              return f(r, x, i);\n            });\n          });\n        }\n      }\n    };\n  });\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n  module.exports = factory();\n});","map":{"version":3,"names":["define","array","Promise","arrayMap","Array","prototype","map","arrayReduce","reduce","arrayReduceRight","reduceRight","arrayForEach","forEach","toPromise","resolve","all","any","some","settle","spread","onFulfilled","then","apply","promises","reject","pending","errors","call","p","handleReject","e","push","n","notify","nFulfill","nReject","results","handleResolve","Math","max","min","x","f","fallback","inspect","arguments","length","reducer","result","i","r","amd","factory","module","exports"],"sources":["C:/Users/twotr/Desktop/College/vsCode/WorkHumanApplication/country-search/node_modules/scatter/node_modules/when/lib/array.js"],"sourcesContent":["/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function array(Promise) {\n\n\t\tvar arrayMap = Array.prototype.map;\n\t\tvar arrayReduce = Array.prototype.reduce;\n\t\tvar arrayReduceRight = Array.prototype.reduceRight;\n\t\tvar arrayForEach = Array.prototype.forEach;\n\n\t\tvar toPromise = Promise.resolve;\n\t\tvar all = Promise.all;\n\n\t\t// Additional array combinators\n\n\t\tPromise.any = any;\n\t\tPromise.some = some;\n\t\tPromise.settle = settle;\n\n\t\tPromise.map = map;\n\t\tPromise.reduce = reduce;\n\t\tPromise.reduceRight = reduceRight;\n\n\t\t/**\n\t\t * When this promise fulfills with an array, do\n\t\t * onFulfilled.apply(void 0, array)\n\t\t * @param (function) onFulfilled function to apply\n\t\t * @returns {Promise} promise for the result of applying onFulfilled\n\t\t */\n\t\tPromise.prototype.spread = function(onFulfilled) {\n\t\t\treturn this.then(all).then(function(array) {\n\t\t\t\treturn onFulfilled.apply(void 0, array);\n\t\t\t});\n\t\t};\n\n\t\treturn Promise;\n\n\t\t/**\n\t\t * One-winner competitive race.\n\t\t * Return a promise that will fulfill when one of the promises\n\t\t * in the input array fulfills, or will reject when all promises\n\t\t * have rejected.\n\t\t * @param {array} promises\n\t\t * @returns {Promise} promise for the first fulfilled value\n\t\t */\n\t\tfunction any(promises) {\n\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\tvar pending = 0;\n\t\t\t\tvar errors = [];\n\n\t\t\t\tarrayForEach.call(promises, function(p) {\n\t\t\t\t\t++pending;\n\t\t\t\t\ttoPromise(p).then(resolve, handleReject);\n\t\t\t\t});\n\n\t\t\t\tif(pending === 0) {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\n\t\t\t\tfunction handleReject(e) {\n\t\t\t\t\terrors.push(e);\n\t\t\t\t\tif(--pending === 0) {\n\t\t\t\t\t\treject(errors);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * N-winner competitive race\n\t\t * Return a promise that will fulfill when n input promises have\n\t\t * fulfilled, or will reject when it becomes impossible for n\n\t\t * input promises to fulfill (ie when promises.length - n + 1\n\t\t * have rejected)\n\t\t * @param {array} promises\n\t\t * @param {number} n\n\t\t * @returns {Promise} promise for the earliest n fulfillment values\n\t\t */\n\t\tfunction some(promises, n) {\n\t\t\treturn new Promise(function(resolve, reject, notify) {\n\t\t\t\tvar nFulfill = 0;\n\t\t\t\tvar nReject;\n\t\t\t\tvar results = [];\n\t\t\t\tvar errors = [];\n\n\t\t\t\tarrayForEach.call(promises, function(p) {\n\t\t\t\t\t++nFulfill;\n\t\t\t\t\ttoPromise(p).then(handleResolve, handleReject, notify);\n\t\t\t\t});\n\n\t\t\t\tn = Math.max(n, 0);\n\t\t\t\tnReject = (nFulfill - n + 1);\n\t\t\t\tnFulfill = Math.min(n, nFulfill);\n\n\t\t\t\tif(nFulfill === 0) {\n\t\t\t\t\tresolve(results);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfunction handleResolve(x) {\n\t\t\t\t\tif(nFulfill > 0) {\n\t\t\t\t\t\t--nFulfill;\n\t\t\t\t\t\tresults.push(x);\n\n\t\t\t\t\t\tif(nFulfill === 0) {\n\t\t\t\t\t\t\tresolve(results);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction handleReject(e) {\n\t\t\t\t\tif(nReject > 0) {\n\t\t\t\t\t\t--nReject;\n\t\t\t\t\t\terrors.push(e);\n\n\t\t\t\t\t\tif(nReject === 0) {\n\t\t\t\t\t\t\treject(errors);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Apply f to the value of each promise in a list of promises\n\t\t * and return a new list containing the results.\n\t\t * @param {array} promises\n\t\t * @param {function} f\n\t\t * @param {function} fallback\n\t\t * @returns {Promise}\n\t\t */\n\t\tfunction map(promises, f, fallback) {\n\t\t\treturn all(arrayMap.call(promises, function(x) {\n\t\t\t\treturn toPromise(x).then(f, fallback);\n\t\t\t}));\n\t\t}\n\n\t\t/**\n\t\t * Return a promise that will always fulfill with an array containing\n\t\t * the outcome states of all input promises.  The returned promise\n\t\t * will never reject.\n\t\t * @param {array} promises\n\t\t * @returns {Promise}\n\t\t */\n\t\tfunction settle(promises) {\n\t\t\treturn all(arrayMap.call(promises, function(p) {\n\t\t\t\tp = toPromise(p);\n\t\t\t\treturn p.then(inspect, inspect);\n\n\t\t\t\tfunction inspect() {\n\t\t\t\t\treturn p.inspect();\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tfunction reduce(promises, f) {\n\t\t\treturn arguments.length > 2\n\t\t\t\t? arrayReduce.call(promises, reducer, arguments[2])\n\t\t\t\t: arrayReduce.call(promises, reducer);\n\n\t\t\tfunction reducer(result, x, i) {\n\t\t\t\treturn toPromise(result).then(function(r) {\n\t\t\t\t\treturn toPromise(x).then(function(x) {\n\t\t\t\t\t\treturn f(r, x, i);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfunction reduceRight(promises, f) {\n\t\t\treturn arguments.length > 2\n\t\t\t\t? arrayReduceRight.call(promises, reducer, arguments[2])\n\t\t\t\t: arrayReduceRight.call(promises, reducer);\n\n\t\t\tfunction reducer(result, x, i) {\n\t\t\t\treturn toPromise(result).then(function(r) {\n\t\t\t\t\treturn toPromise(x).then(function(x) {\n\t\t\t\t\t\treturn f(r, x, i);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}