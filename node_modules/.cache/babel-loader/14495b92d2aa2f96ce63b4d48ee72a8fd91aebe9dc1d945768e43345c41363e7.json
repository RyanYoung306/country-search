{"ast":null,"code":"/*! JSON.minify()\n v0.1 (c) Kyle Simpson\n MIT License\n */\n\n//(function(){\n\nexports.minify = function (json) {\n  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r/g,\n    in_string = false,\n    in_multiline_comment = false,\n    in_singleline_comment = false,\n    tmp,\n    tmp2,\n    new_str = [],\n    ns = 0,\n    from = 0,\n    lc,\n    rc;\n  tokenizer.lastIndex = 0;\n  while (tmp = tokenizer.exec(json)) {\n    lc = RegExp.leftContext;\n    rc = RegExp.rightContext;\n    if (!in_multiline_comment && !in_singleline_comment) {\n      tmp2 = lc.substring(from);\n      if (!in_string) {\n        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, \"\");\n      }\n      new_str[ns++] = tmp2;\n    }\n    from = tokenizer.lastIndex;\n    if (tmp[0] == \"\\\"\" && !in_multiline_comment && !in_singleline_comment) {\n      tmp2 = lc.match(/(\\\\)*$/);\n      if (!in_string || !tmp2 || tmp2[0].length % 2 == 0) {\n        // start of string with \", or unescaped \" character found to end string\n        in_string = !in_string;\n      }\n      from--; // include \" character in next catch\n      rc = json.substring(from);\n    } else if (tmp[0] == \"/*\" && !in_string && !in_multiline_comment && !in_singleline_comment) {\n      in_multiline_comment = true;\n    } else if (tmp[0] == \"*/\" && !in_string && in_multiline_comment && !in_singleline_comment) {\n      in_multiline_comment = false;\n    } else if (tmp[0] == \"//\" && !in_string && !in_multiline_comment && !in_singleline_comment) {\n      in_singleline_comment = true;\n    } else if ((tmp[0] == \"\\n\" || tmp[0] == \"\\r\") && !in_string && !in_multiline_comment && in_singleline_comment) {\n      in_singleline_comment = false;\n    } else if (!in_multiline_comment && !in_singleline_comment && !/\\n|\\r|\\s/.test(tmp[0])) {\n      new_str[ns++] = tmp[0];\n    }\n  }\n  new_str[ns++] = rc;\n  return new_str.join(\"\");\n};\n//})(this);","map":{"version":3,"names":["exports","minify","json","tokenizer","in_string","in_multiline_comment","in_singleline_comment","tmp","tmp2","new_str","ns","from","lc","rc","lastIndex","exec","RegExp","leftContext","rightContext","substring","replace","match","length","test","join"],"sources":["C:/Users/twotr/Desktop/College/vsCode/WorkHumanApplication/country-search/node_modules/particles/lib/json-minify.js"],"sourcesContent":["/*! JSON.minify()\n v0.1 (c) Kyle Simpson\n MIT License\n */\n\n//(function(){\n\nexports.minify = function(json) {\n\n  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r/g,\n    in_string = false,\n    in_multiline_comment = false,\n    in_singleline_comment = false,\n    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc\n    ;\n\n  tokenizer.lastIndex = 0;\n\n  while (tmp = tokenizer.exec(json)) {\n    lc = RegExp.leftContext;\n    rc = RegExp.rightContext;\n    if (!in_multiline_comment && !in_singleline_comment) {\n      tmp2 = lc.substring(from);\n      if (!in_string) {\n        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g,\"\");\n      }\n      new_str[ns++] = tmp2;\n    }\n    from = tokenizer.lastIndex;\n\n    if (tmp[0] == \"\\\"\" && !in_multiline_comment && !in_singleline_comment) {\n      tmp2 = lc.match(/(\\\\)*$/);\n      if (!in_string || !tmp2 || (tmp2[0].length % 2) == 0) {\t// start of string with \", or unescaped \" character found to end string\n        in_string = !in_string;\n      }\n      from--; // include \" character in next catch\n      rc = json.substring(from);\n    }\n    else if (tmp[0] == \"/*\" && !in_string && !in_multiline_comment && !in_singleline_comment) {\n      in_multiline_comment = true;\n    }\n    else if (tmp[0] == \"*/\" && !in_string && in_multiline_comment && !in_singleline_comment) {\n      in_multiline_comment = false;\n    }\n    else if (tmp[0] == \"//\" && !in_string && !in_multiline_comment && !in_singleline_comment) {\n      in_singleline_comment = true;\n    }\n    else if ((tmp[0] == \"\\n\" || tmp[0] == \"\\r\") && !in_string && !in_multiline_comment && in_singleline_comment) {\n      in_singleline_comment = false;\n    }\n    else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {\n      new_str[ns++] = tmp[0];\n    }\n  }\n  new_str[ns++] = rc;\n  return new_str.join(\"\");\n};\n//})(this);"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEAA,OAAO,CAACC,MAAM,GAAG,UAASC,IAAI,EAAE;EAE9B,IAAIC,SAAS,GAAG,+BAA+B;IAC7CC,SAAS,GAAG,KAAK;IACjBC,oBAAoB,GAAG,KAAK;IAC5BC,qBAAqB,GAAG,KAAK;IAC7BC,GAAG;IAAEC,IAAI;IAAEC,OAAO,GAAG,EAAE;IAAEC,EAAE,GAAG,CAAC;IAAEC,IAAI,GAAG,CAAC;IAAEC,EAAE;IAAEC,EAAE;EAGnDV,SAAS,CAACW,SAAS,GAAG,CAAC;EAEvB,OAAOP,GAAG,GAAGJ,SAAS,CAACY,IAAI,CAACb,IAAI,CAAC,EAAE;IACjCU,EAAE,GAAGI,MAAM,CAACC,WAAW;IACvBJ,EAAE,GAAGG,MAAM,CAACE,YAAY;IACxB,IAAI,CAACb,oBAAoB,IAAI,CAACC,qBAAqB,EAAE;MACnDE,IAAI,GAAGI,EAAE,CAACO,SAAS,CAACR,IAAI,CAAC;MACzB,IAAI,CAACP,SAAS,EAAE;QACdI,IAAI,GAAGA,IAAI,CAACY,OAAO,CAAC,cAAc,EAAC,EAAE,CAAC;MACxC;MACAX,OAAO,CAACC,EAAE,EAAE,CAAC,GAAGF,IAAI;IACtB;IACAG,IAAI,GAAGR,SAAS,CAACW,SAAS;IAE1B,IAAIP,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAACF,oBAAoB,IAAI,CAACC,qBAAqB,EAAE;MACrEE,IAAI,GAAGI,EAAE,CAACS,KAAK,CAAC,QAAQ,CAAC;MACzB,IAAI,CAACjB,SAAS,IAAI,CAACI,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,CAACc,MAAM,GAAG,CAAC,IAAK,CAAC,EAAE;QAAE;QACtDlB,SAAS,GAAG,CAACA,SAAS;MACxB;MACAO,IAAI,EAAE,CAAC,CAAC;MACRE,EAAE,GAAGX,IAAI,CAACiB,SAAS,CAACR,IAAI,CAAC;IAC3B,CAAC,MACI,IAAIJ,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAACH,SAAS,IAAI,CAACC,oBAAoB,IAAI,CAACC,qBAAqB,EAAE;MACxFD,oBAAoB,GAAG,IAAI;IAC7B,CAAC,MACI,IAAIE,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAACH,SAAS,IAAIC,oBAAoB,IAAI,CAACC,qBAAqB,EAAE;MACvFD,oBAAoB,GAAG,KAAK;IAC9B,CAAC,MACI,IAAIE,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAACH,SAAS,IAAI,CAACC,oBAAoB,IAAI,CAACC,qBAAqB,EAAE;MACxFA,qBAAqB,GAAG,IAAI;IAC9B,CAAC,MACI,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,IAAIA,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,KAAK,CAACH,SAAS,IAAI,CAACC,oBAAoB,IAAIC,qBAAqB,EAAE;MAC3GA,qBAAqB,GAAG,KAAK;IAC/B,CAAC,MACI,IAAI,CAACD,oBAAoB,IAAI,CAACC,qBAAqB,IAAI,CAAE,UAAU,CAACiB,IAAI,CAAChB,GAAG,CAAC,CAAC,CAAC,CAAE,EAAE;MACtFE,OAAO,CAACC,EAAE,EAAE,CAAC,GAAGH,GAAG,CAAC,CAAC,CAAC;IACxB;EACF;EACAE,OAAO,CAACC,EAAE,EAAE,CAAC,GAAGG,EAAE;EAClB,OAAOJ,OAAO,CAACe,IAAI,CAAC,EAAE,CAAC;AACzB,CAAC;AACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}