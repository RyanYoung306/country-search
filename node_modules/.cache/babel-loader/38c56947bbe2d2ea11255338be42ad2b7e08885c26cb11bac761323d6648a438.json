{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\twotr\\\\Desktop\\\\College\\\\vsCode\\\\WorkHumanApplication\\\\country-search\\\\src\\\\components\\\\search.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardMedia from '@mui/material/CardMedia';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst countries = [];\nasync function getCountries() {\n  try {\n    const response = await fetch('http://localhost:5000/workHuman/countries'); // Add 'http://' before 'localhost'\n    const data = await response.json(); // Use response.json() to parse JSON\n    countries.push(...data);\n    // console.log(data);\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n// async function print() {\n//   await getCountries();\n//   countries.forEach((country) => {\n//     console.log(country.name);\n//   });\n// }\n\nconst Search = () => {\n  _s();\n  const [searchInput, setSearchInput] = useState('');\n  const [filteredCountries, setFilteredCountries] = useState([]);\n  // const countries = \n  // [\n  //   { name: \"Belgium\", continent: \"Europe\" },\n  //   { name: \"India\", continent: \"Asia\" },\n  //   { name: \"Bolivia\", continent: \"South America\" },\n  //   { name: \"Ghana\", continent: \"Africa\" },\n  //   { name: \"Japan\", continent: \"Asia\" },\n  //   { name: \"Canada\", continent: \"North America\" },\n  //   { name: \"New Zealand\", continent: \"Australasia\" },\n  //   { name: \"Italy\", continent: \"Europe\" },\n  //   { name: \"South Africa\", continent: \"Africa\" },\n  //   { name: \"China\", continent: \"Asia\" },\n  //   { name: \"Paraguay\", continent: \"South America\" },\n  //   { name: \"Usa\", continent: \"North America\" },\n  //   { name: \"France\", continent: \"Europe\" },\n  //   { name: \"Botswana\", continent: \"Africa\" },\n  //   { name: \"Spain\", continent: \"Europe\" },\n  //   { name: \"Senegal\", continent: \"Africa\" },\n  //   { name: \"Brazil\", continent: \"South America\" },\n  //   { name: \"Denmark\", continent: \"Europe\" },\n  //   { name: \"Mexico\", continent: \"South America\" },\n  //   { name: \"Australia\", continent: \"Australasia\" },\n  //   { name: \"Tanzania\", continent: \"Africa\" },\n  //   { name: \"Bangladesh\", continent: \"Asia\" },\n  //   { name: \"Portugal\", continent: \"Europe\" },\n  //   { name: \"Pakistan\", continent:\"Asia\" },\n  // ];\n\n  const handleChange = e => {\n    const inputValue = e.target.value;\n    setSearchInput(inputValue);\n\n    // Filter countries based on the search input\n    const filtered = countries.filter(country => country.name.toLowerCase().includes(inputValue.toLowerCase()));\n    setFilteredCountries(filtered);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete\n    // freeSolo\n    , {\n      id: \"free-solo-2-demo\",\n      disableClearable: true,\n      options: countries.map(option => option.name),\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n        ...params,\n        sx: {\n          width: 300,\n          backgroundColor: \"white\"\n        },\n        onChange: handleChange,\n        color: \"primary\",\n        label: \"Search input\",\n        InputProps: {\n          ...params.InputProps,\n          type: 'search'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredCountries.map((country, index) => index % 3 === 0 &&\n        /*#__PURE__*/\n        // create new row after every 3 countries\n        _jsxDEV(\"tr\", {\n          children: filteredCountries.slice(index, index + 3).map((country, subIndex) =>\n          /*#__PURE__*/\n          // slice array to get 3 countries at a time\n          _jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              variant: \"outlined\",\n              size: \"lg\",\n              sx: {\n                maxWidth: 600,\n                backgroundColor: \"#010416\",\n                borderColor: \"white\",\n                padding: \"25px\",\n                border: \"2px solid white\",\n                text: \"white\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                sx: {\n                  color: \"white\"\n                },\n                title: country.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n                component: \"img\",\n                height: \"200\",\n                image: country.flag,\n                alt: \"country flag\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  color: \"white\",\n                  children: \"Capital: \" + country.details.capital\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  color: \"white\",\n                  children: \"Population: \" + country.details.population + \" people\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  color: \"white\",\n                  children: \"Currency: \" + country.details.currency\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this)\n          }, subIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"KvZETNnlOW+wFJuN0GZQczAJhyU=\");\n_c = Search;\ngetCountries();\n// print();\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","Card","CardHeader","CardMedia","CardContent","Typography","Autocomplete","TextField","jsxDEV","_jsxDEV","countries","getCountries","response","fetch","data","json","push","e","console","error","Search","_s","searchInput","setSearchInput","filteredCountries","setFilteredCountries","handleChange","inputValue","target","value","filtered","filter","country","name","toLowerCase","includes","children","id","disableClearable","options","map","option","renderInput","params","sx","width","backgroundColor","onChange","color","label","InputProps","type","fileName","_jsxFileName","lineNumber","columnNumber","index","slice","subIndex","variant","size","maxWidth","borderColor","padding","border","text","title","component","height","image","flag","alt","details","capital","population","currency","_c","$RefreshReg$"],"sources":["C:/Users/twotr/Desktop/College/vsCode/WorkHumanApplication/country-search/src/components/search.js"],"sourcesContent":["import React, { useState} from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport TextField from '@mui/material/TextField';\r\nconst countries = [];\r\nasync function getCountries() {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/workHuman/countries'); // Add 'http://' before 'localhost'\r\n    const data = await response.json(); // Use response.json() to parse JSON\r\n    countries.push(...data);\r\n    // console.log(data);\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\n// async function print() {\r\n//   await getCountries();\r\n//   countries.forEach((country) => {\r\n//     console.log(country.name);\r\n//   });\r\n// }\r\n\r\n\r\nconst Search = () => {\r\n  \r\n  const [searchInput, setSearchInput] = useState('');\r\n  const [filteredCountries, setFilteredCountries] = useState([]);\r\n  // const countries = \r\n  // [\r\n  //   { name: \"Belgium\", continent: \"Europe\" },\r\n  //   { name: \"India\", continent: \"Asia\" },\r\n  //   { name: \"Bolivia\", continent: \"South America\" },\r\n  //   { name: \"Ghana\", continent: \"Africa\" },\r\n  //   { name: \"Japan\", continent: \"Asia\" },\r\n  //   { name: \"Canada\", continent: \"North America\" },\r\n  //   { name: \"New Zealand\", continent: \"Australasia\" },\r\n  //   { name: \"Italy\", continent: \"Europe\" },\r\n  //   { name: \"South Africa\", continent: \"Africa\" },\r\n  //   { name: \"China\", continent: \"Asia\" },\r\n  //   { name: \"Paraguay\", continent: \"South America\" },\r\n  //   { name: \"Usa\", continent: \"North America\" },\r\n  //   { name: \"France\", continent: \"Europe\" },\r\n  //   { name: \"Botswana\", continent: \"Africa\" },\r\n  //   { name: \"Spain\", continent: \"Europe\" },\r\n  //   { name: \"Senegal\", continent: \"Africa\" },\r\n  //   { name: \"Brazil\", continent: \"South America\" },\r\n  //   { name: \"Denmark\", continent: \"Europe\" },\r\n  //   { name: \"Mexico\", continent: \"South America\" },\r\n  //   { name: \"Australia\", continent: \"Australasia\" },\r\n  //   { name: \"Tanzania\", continent: \"Africa\" },\r\n  //   { name: \"Bangladesh\", continent: \"Asia\" },\r\n  //   { name: \"Portugal\", continent: \"Europe\" },\r\n  //   { name: \"Pakistan\", continent:\"Asia\" },\r\n  // ];\r\n\r\n  const handleChange = (e) => {\r\n    const inputValue = e.target.value;\r\n    setSearchInput(inputValue);\r\n\r\n    // Filter countries based on the search input\r\n    const filtered = countries.filter((country) =>\r\n      country.name.toLowerCase().includes(inputValue.toLowerCase())\r\n    );\r\n    setFilteredCountries(filtered);\r\n  };\r\n  return (\r\n    <div>\r\n      <Autocomplete\r\n        // freeSolo\r\n        id=\"free-solo-2-demo\"\r\n        disableClearable\r\n        options={countries.map((option) => option.name)}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            sx={{ width: 300,backgroundColor: \"white\"}}\r\n            onChange={handleChange}\r\n            color = \"primary\"\r\n            label=\"Search input\"\r\n\r\n            InputProps={{\r\n              ...params.InputProps,\r\n              type: 'search',\r\n            }}\r\n          />\r\n        )}\r\n      />\r\n      <table>\r\n        <tbody>\r\n          {filteredCountries.map((country, index) => (\r\n           index % 3 === 0 && ( // create new row after every 3 countries\r\n            <tr key={index}>\r\n              {filteredCountries.slice(index, index + 3).map((country, subIndex) => ( // slice array to get 3 countries at a time\r\n                <td key={subIndex}>\r\n              <Card \r\n                variant=\"outlined\" \r\n                size={\"lg\"}\r\n                sx={{ maxWidth: 600, \r\n                backgroundColor: \"#010416\", \r\n                borderColor: \"white\",\r\n                padding: \"25px\",\r\n                border: \"2px solid white\",\r\n                text: \"white\"\r\n              }} \r\n              >\r\n                <CardHeader\r\n                  sx = {{color: \"white\"}}\r\n                  title={country.name}\r\n                  \r\n                />\r\n                <CardMedia\r\n                  component=\"img\"\r\n                  height=\"200\"\r\n                  image={country.flag}\r\n                  alt=\"country flag\"\r\n                />\r\n                <CardContent>\r\n                  <Typography variant=\"body1\" color=\"white\" >\r\n                    {\"Capital: \" + country.details.capital}\r\n                  </Typography>\r\n                  <Typography variant=\"body1\" color=\"white\">\r\n                    {\"Population: \" + country.details.population + \" people\"}\r\n                  </Typography>\r\n                  <Typography variant=\"body1\" color=\"white\">\r\n                    {\"Currency: \" + country.details.currency}\r\n                  </Typography>\r\n              </CardContent>\r\n              </Card>\r\n              </td>\r\n              ))}\r\n            </tr>\r\n              )\r\n          ))} \r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\ngetCountries();\r\n// print();\r\nexport default Search;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}