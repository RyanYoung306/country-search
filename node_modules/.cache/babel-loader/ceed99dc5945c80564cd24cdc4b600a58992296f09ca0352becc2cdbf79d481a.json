{"ast":null,"code":"/** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n/**\n * parallel.js\n *\n * Run a set of task functions in parallel.  All tasks will\n * receive the same args\n *\n * @author Brian Cavalier\n * @author John Hann\n */\n\n(function (define) {\n  define(function (require) {\n    var when, slice;\n    when = require('./when');\n    slice = Array.prototype.slice;\n\n    /**\n     * Run array of tasks in parallel\n     * @param tasks {Array|Promise} array or promiseForArray of task functions\n     * @param [args] {*} arguments to be passed to all tasks\n     * @return {Promise} promise for array containing the\n     * result of each task in the array position corresponding\n     * to position of the task in the tasks array\n     */\n    return function parallel(tasks /*, args... */) {\n      return when.all(slice.call(arguments, 1)).then(function (args) {\n        return when.map(tasks, function (task) {\n          return task.apply(null, args);\n        });\n      });\n    };\n  });\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n  module.exports = factory(require);\n}\n// Boilerplate for AMD and Node\n);","map":{"version":3,"names":["define","require","when","slice","Array","prototype","parallel","tasks","all","call","arguments","then","args","map","task","apply","amd","factory","module","exports"],"sources":["C:/Users/twotr/Desktop/College/vsCode/WorkHumanApplication/country-search/node_modules/when/parallel.js"],"sourcesContent":["/** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n/**\n * parallel.js\n *\n * Run a set of task functions in parallel.  All tasks will\n * receive the same args\n *\n * @author Brian Cavalier\n * @author John Hann\n */\n\n(function(define) {\ndefine(function(require) {\n\n\tvar when, slice;\n\n\twhen = require('./when');\n\tslice = Array.prototype.slice;\n\n\t/**\n\t * Run array of tasks in parallel\n\t * @param tasks {Array|Promise} array or promiseForArray of task functions\n\t * @param [args] {*} arguments to be passed to all tasks\n\t * @return {Promise} promise for array containing the\n\t * result of each task in the array position corresponding\n\t * to position of the task in the tasks array\n\t */\n\treturn function parallel(tasks /*, args... */) {\n\t\treturn when.all(slice.call(arguments, 1)).then(function(args) {\n\t\t\treturn when.map(tasks, function(task) {\n\t\t\t\treturn task.apply(null, args);\n\t\t\t});\n\t\t});\n\t};\n\n});\n})(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n);\n\n\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,UAASA,MAAM,EAAE;EAClBA,MAAM,CAAC,UAASC,OAAO,EAAE;IAExB,IAAIC,IAAI,EAAEC,KAAK;IAEfD,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC;IACxBE,KAAK,GAAGC,KAAK,CAACC,SAAS,CAACF,KAAK;;IAE7B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;IACC,OAAO,SAASG,QAAQA,CAACC,KAAK,CAAC,gBAAgB;MAC9C,OAAOL,IAAI,CAACM,GAAG,CAACL,KAAK,CAACM,IAAI,CAACC,SAAS,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,UAASC,IAAI,EAAE;QAC7D,OAAOV,IAAI,CAACW,GAAG,CAACN,KAAK,EAAE,UAASO,IAAI,EAAE;UACrC,OAAOA,IAAI,CAACC,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC;QAC9B,CAAC,CAAC;MACH,CAAC,CAAC;IACH,CAAC;EAEF,CAAC,CAAC;AACF,CAAC,EACA,OAAOZ,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACgB,GAAG,GAAGhB,MAAM,GAAG,UAAUiB,OAAO,EAAE;EAAEC,MAAM,CAACC,OAAO,GAAGF,OAAO,CAAChB,OAAO,CAAC;AAAE;AAC9G;AACD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}