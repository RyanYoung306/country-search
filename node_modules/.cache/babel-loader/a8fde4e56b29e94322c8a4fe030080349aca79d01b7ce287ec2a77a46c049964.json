{"ast":null,"code":"/** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n/**\n * sequence.js\n *\n * Run a set of task functions in sequence.  All tasks will\n * receive the same args.\n *\n * @author Brian Cavalier\n * @author John Hann\n */\n\n(function (define) {\n  define(function (require) {\n    var when, slice;\n    when = require('./when');\n    slice = Array.prototype.slice;\n\n    /**\n     * Run array of tasks in sequence with no overlap\n     * @param tasks {Array|Promise} array or promiseForArray of task functions\n     * @param [args] {*} arguments to be passed to all tasks\n     * @return {Promise} promise for an array containing\n     * the result of each task in the array position corresponding\n     * to position of the task in the tasks array\n     */\n    return function sequence(tasks /*, args... */) {\n      var results = [];\n      return when.all(slice.call(arguments, 1)).then(function (args) {\n        return when.reduce(tasks, function (results, task) {\n          return when(task.apply(null, args), addResult);\n        }, results);\n      });\n      function addResult(result) {\n        results.push(result);\n        return results;\n      }\n    };\n  });\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n  module.exports = factory(require);\n}\n// Boilerplate for AMD and Node\n);","map":{"version":3,"names":["define","require","when","slice","Array","prototype","sequence","tasks","results","all","call","arguments","then","args","reduce","task","apply","addResult","result","push","amd","factory","module","exports"],"sources":["C:/Users/twotr/Desktop/College/vsCode/WorkHumanApplication/country-search/node_modules/when/sequence.js"],"sourcesContent":["/** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n/**\n * sequence.js\n *\n * Run a set of task functions in sequence.  All tasks will\n * receive the same args.\n *\n * @author Brian Cavalier\n * @author John Hann\n */\n\n(function(define) {\ndefine(function(require) {\n\n\tvar when, slice;\n\n\twhen = require('./when');\n\tslice = Array.prototype.slice;\n\n\t/**\n\t * Run array of tasks in sequence with no overlap\n\t * @param tasks {Array|Promise} array or promiseForArray of task functions\n\t * @param [args] {*} arguments to be passed to all tasks\n\t * @return {Promise} promise for an array containing\n\t * the result of each task in the array position corresponding\n\t * to position of the task in the tasks array\n\t */\n\treturn function sequence(tasks /*, args... */) {\n\t\tvar results = [];\n\n\t\treturn when.all(slice.call(arguments, 1)).then(function(args) {\n\t\t\treturn when.reduce(tasks, function(results, task) {\n\t\t\t\treturn when(task.apply(null, args), addResult);\n\t\t\t}, results);\n\t\t});\n\n\t\tfunction addResult(result) {\n\t\t\tresults.push(result);\n\t\t\treturn results;\n\t\t}\n\t};\n\n});\n})(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n);\n\n\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,UAASA,MAAM,EAAE;EAClBA,MAAM,CAAC,UAASC,OAAO,EAAE;IAExB,IAAIC,IAAI,EAAEC,KAAK;IAEfD,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC;IACxBE,KAAK,GAAGC,KAAK,CAACC,SAAS,CAACF,KAAK;;IAE7B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;IACC,OAAO,SAASG,QAAQA,CAACC,KAAK,CAAC,gBAAgB;MAC9C,IAAIC,OAAO,GAAG,EAAE;MAEhB,OAAON,IAAI,CAACO,GAAG,CAACN,KAAK,CAACO,IAAI,CAACC,SAAS,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,UAASC,IAAI,EAAE;QAC7D,OAAOX,IAAI,CAACY,MAAM,CAACP,KAAK,EAAE,UAASC,OAAO,EAAEO,IAAI,EAAE;UACjD,OAAOb,IAAI,CAACa,IAAI,CAACC,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC,EAAEI,SAAS,CAAC;QAC/C,CAAC,EAAET,OAAO,CAAC;MACZ,CAAC,CAAC;MAEF,SAASS,SAASA,CAACC,MAAM,EAAE;QAC1BV,OAAO,CAACW,IAAI,CAACD,MAAM,CAAC;QACpB,OAAOV,OAAO;MACf;IACD,CAAC;EAEF,CAAC,CAAC;AACF,CAAC,EACA,OAAOR,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACoB,GAAG,GAAGpB,MAAM,GAAG,UAAUqB,OAAO,EAAE;EAAEC,MAAM,CAACC,OAAO,GAAGF,OAAO,CAACpB,OAAO,CAAC;AAAE;AAC9G;AACD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}