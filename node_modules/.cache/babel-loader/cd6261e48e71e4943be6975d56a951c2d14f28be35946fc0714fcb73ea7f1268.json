{"ast":null,"code":"var Config = require('./lib/config'),\n  LoggerFactory = require('./lib/logger'),\n  path = require('path'),\n  promises = require('./lib/promises'),\n  Scatter = require('scatter'),\n  ScatterPluginConfig = require('scatter-plugin-config'),\n  ScatterPluginAll = require('scatter-plugin-all');\nfunction ParticlesApp(options) {\n  this.options = options || {};\n  this.config = new Config();\n  this.config.initialize(this.options.config);\n  this.loggerFactory = new LoggerFactory(this.config);\n  this.defaultLogger = this.loggerFactory.create();\n  this.scatterLogger = this.loggerFactory.create(\"scatter\");\n  var self = this;\n  this.scatter = new Scatter({\n    log: self.scatterLogger.log.bind(this.scatterLogger),\n    startProfiling: self.scatterLogger.startProfiling.bind(this.scatterLogger),\n    plugins: [new ScatterPluginConfig(), new ScatterPluginAll()]\n  });\n\n  //register core modules\n  this.scatter.registerModuleInstance('config', this.config);\n  this.scatter.registerModuleInstance('logger', this.loggerFactory.create.bind(this.loggerFactory));\n  this.scatter.registerModuleInstance('log', this.defaultLogger);\n  this.scatter.registerModuleInstance('utils/promises', promises);\n  var containerName = this.options.container || this.config.get('container') || 'default';\n  this.scatter.registerParticles(this.config.get(['containers', containerName, 'particles']));\n  var nodeModulesDir = this.config.get(containerName + '.nodeModulesDir') || path.join(this.config.get('appRoot'), 'node_modules');\n  this.scatter.setNodeModulesDir(nodeModulesDir);\n}\nParticlesApp.prototype.load = function () {\n  return this.scatter.load.apply(this.scatter, arguments);\n};\nParticlesApp.prototype.run = function (service /*, ..args*/) {\n  var self = this;\n  service = service || 'svc!app_start';\n  var args = Array.prototype.slice.call(arguments, 1);\n  self.defaultLogger.info(\"About to run Particles service [\" + service + \"]\");\n  return self.scatter.load(service).then(function (svc) {\n    return svc.apply(null, args);\n  }).then(function (res) {\n    self.defaultLogger.info(\"Particles service [\" + service + \"] successfully invoked\");\n    return res;\n  }).otherwise(function (err) {\n    self.defaultLogger.error({\n      err: err\n    }, \"Failed to run Particles service\");\n    throw err;\n  });\n};\nmodule.exports = ParticlesApp;","map":{"version":3,"names":["Config","require","LoggerFactory","path","promises","Scatter","ScatterPluginConfig","ScatterPluginAll","ParticlesApp","options","config","initialize","loggerFactory","defaultLogger","create","scatterLogger","self","scatter","log","bind","startProfiling","plugins","registerModuleInstance","containerName","container","get","registerParticles","nodeModulesDir","join","setNodeModulesDir","prototype","load","apply","arguments","run","service","args","Array","slice","call","info","then","svc","res","otherwise","err","error","module","exports"],"sources":["C:/Users/twotr/Desktop/College/vsCode/WorkHumanApplication/country-search/node_modules/particles/index.js"],"sourcesContent":["var Config = require('./lib/config'),\n  LoggerFactory = require('./lib/logger'),\n  path  = require('path'),\n  promises = require('./lib/promises'),\n  Scatter = require('scatter'),\n  ScatterPluginConfig = require('scatter-plugin-config'),\n  ScatterPluginAll = require('scatter-plugin-all');\n\nfunction ParticlesApp(options) {\n  this.options = options || {};\n  this.config = new Config();\n  this.config.initialize(this.options.config);\n  \n  this.loggerFactory = new LoggerFactory(this.config);\n\n  this.defaultLogger = this.loggerFactory.create();\n  this.scatterLogger = this.loggerFactory.create(\"scatter\");\n  \n  var self = this;\n  this.scatter = new Scatter({\n    log: self.scatterLogger.log.bind(this.scatterLogger),\n    startProfiling: self.scatterLogger.startProfiling.bind(this.scatterLogger),\n    plugins: [new ScatterPluginConfig(), new ScatterPluginAll()]\n  });\n\n  //register core modules\n  this.scatter.registerModuleInstance('config', this.config);\n  this.scatter.registerModuleInstance('logger', this.loggerFactory.create.bind(this.loggerFactory));\n  this.scatter.registerModuleInstance('log', this.defaultLogger);\n  this.scatter.registerModuleInstance('utils/promises', promises);\n  \n  var containerName = this.options.container || this.config.get('container') || 'default';\n  this.scatter.registerParticles(this.config.get(['containers', containerName, 'particles']));\n  \n  var nodeModulesDir = this.config.get(containerName + '.nodeModulesDir') || \n      (path.join(this.config.get('appRoot'), 'node_modules'));\n  this.scatter.setNodeModulesDir(nodeModulesDir);\n}\n\nParticlesApp.prototype.load = function() {\n  return this.scatter.load.apply(this.scatter, arguments);\n};\n\nParticlesApp.prototype.run = function(service /*, ..args*/) {\n  var self = this;\n  service = service || 'svc!app_start';\n  var args = Array.prototype.slice.call(arguments, 1);\n  self.defaultLogger.info(\"About to run Particles service [\"+service+\"]\");\n  return self.scatter.load(service).then(function(svc) {\n    return svc.apply(null, args);\n  })\n  .then(function(res) {\n    self.defaultLogger.info(\"Particles service [\"+service+\"] successfully invoked\");\n    return res;\n  })\n  .otherwise(function(err) {\n    self.defaultLogger.error({err: err}, \"Failed to run Particles service\");\n    throw err;\n  });\n};\n\n\nmodule.exports = ParticlesApp;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}